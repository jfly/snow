#!/usr/bin/env bash

set -euo pipefail
shopt -s globstar

if [ $# -eq 0 ]; then

    echo "Usage: $0 [target]

To deploy all machines:

    ./deploy '*'

To deploy one machine:

    ./deploy 'dallben'
"
    exit 1
fi

function build_containers() {
    for f in k8s/**/Dockerfile; do
        dir=$(dirname "$f")
        fq_image_name=containers.snow.jflei.com/$(basename "$dir"):latest
        docker build "$dir" -t "$fq_image_name"
        docker push "$fq_image_name"
    done

    for f in k8s/**/flake.nix; do
        flake=$(dirname "$f")
        target="./${flake}#stream-docker"
        result=$(nix build "$target" --no-link --print-out-paths)

        # Note: we're intentionally using ' here instead of " because we want
        # the $ chars to be passed as-is to `nix eval`.
        # shellcheck disable=SC2016
        immutable_image=$(nix eval "$target" --raw --apply 'img: "${img.imageName}:${img.imageTag}"')
        # shellcheck disable=SC2016
        latest_image=$(nix eval "$target" --raw --apply 'img: "${img.imageName}:latest"')

        fq_immutable_name=docker://containers.snow.jflei.com/$immutable_image
        fq_latest_name=docker://containers.snow.jflei.com/$latest_image

        # Only build and upload the image if it doesn't already exist remotely.
        if ! skopeo inspect "$fq_immutable_name" &>/dev/null; then
            $result | gzip --fast | skopeo --insecure-policy copy docker-archive:/dev/stdin "$fq_immutable_name"
        fi

        # Finally, tag it as the latest version.
        skopeo --insecure-policy copy --preserve-digests --quiet "$fq_immutable_name" "$fq_latest_name"

        # TODO: restart affected deployments, or (better) use immutable image tags in manifests.
    done
}

function deploy_k8s() {
    # Install cert-manager
    kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.7.1/cert-manager.yaml

    for f in k8s/**/*{.yaml,.yaml.secret}; do
        echo "Applying $f"
        kubectl apply -f "$f"
    done

    pulumi up --cwd k8s-pulumi --stack dev --yes
}

function deploy_nix() {
    local target="$1"
    shift
    if [ "$target" = "$(hostname)" ]; then
        # TODO: understand what process is replacing the ~/.ssh/known_hosts
        # symlink with a real file. Probably some ssh invocation?
        # Here's what sometimes happens when home manager is deploying:
        #
        # [ERROR]   stderr) Oct 24 20:05:41 pattern hm-activate-jeremy[51259]: Existing file '/home/jeremy/.ssh/known_hosts' is in the way of '/nix/store/y1fry1gbsncd61klspsk85v954mv8flv-home-manager-files/.ssh/known_hosts'
        if [ -f "$HOME/.ssh/known_hosts" ] && [ ! -L "$HOME/.ssh/known_hosts" ]; then
            mv "$HOME/.ssh/known_hosts" ~/sync/linux-secrets/.ssh/known_hosts
        fi

        # Note: see comment above snow.absoluteRepoPath in overlays/default.nix
        # to see why we do an impure build.
        colmena apply-local --impure --sudo "$@"
    else
        # Note: see comment above snow.absoluteRepoPath in overlays/default.nix
        # to see why we do an impure build.
        colmena apply --impure --on "$target" "$@"
    fi
}

function deploy_nix_router() {
    local target="$1"
    shift

    hostname=${target#openwrt/}
    echo "Deploying to $hostname"

    flake="./$target#my-router"
    # First, check if the version currently installed/running is already up to date?
    #
    # Note: see comment above snow.absoluteRepoPath in overlays/default.nix
    # to see why we do an impure build.
    desired_nix_version=$(nix eval "$flake" --impure --raw --apply 'r: r.hack-nix-version')
    actual_nix_version=$(ssh "$hostname" cat /etc/nix-build-version)
    if [ "$desired_nix_version" = "$actual_nix_version" ]; then
        echo "It looks like $hostname is already up to date (running $actual_nix_version). Not doing anything to it!"
        exit 0
    fi

    echo "It looks $hostname is running the wrong version of stuff (desired $desired_nix_version, running: $actual_nix_version)"

    # Basically copying
    # https://openwrt.org/docs/guide-user/installation/sysupgrade.cli#command-line_instructions
    #
    # Note: see comment above snow.absoluteRepoPath in overlays/default.nix
    # to see why we do an impure build.
    result=$(nix build "$flake" --no-link --print-out-paths --impure)
    files=("$result"/*-sysupgrade.*)
    file=${files[0]}
    dest_filename=/tmp/firmware_image-sysupgrade
    scp -O "$file" "$hostname":$dest_filename
    ssh "$hostname" sysupgrade -v -n $dest_filename
}

tools/deage
target="$1"
shift

if [ "$target" = "k8s" ]; then
    build_containers
    deploy_k8s
elif [[ $target == "openwrt/"* ]]; then
    deploy_nix_router "$target"
else
    deploy_nix "$target" "$@"
fi
