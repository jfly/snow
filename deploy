#!/usr/bin/env bash

set -euo pipefail
shopt -s globstar

help() {
    echo "Usage: $0 [target]

To deploy all machines:

    ./deploy '*'

To deploy one machine:

    ./deploy 'dallben'
" >/dev/stderr
}

target=""
DRY_RUN=0
FORCE=0
for i in "$@"; do
    case $i in
        --dry-run)
            DRY_RUN=1
            ;;
        --force)
            FORCE=1
            ;;
        --help | -h)
            help
            exit 0
            ;;
        --* | -*)
            echo "Unknown option $i" >/dev/stderr
            echo "" >/dev/stderr
            help
            exit 1
            ;;
        *)
            if [ -n "$target" ]; then
                echo "You must specify exactly one target" >/dev/stderr
                echo "" >/dev/stderr
                help
                exit 1

            fi
            target=$i
            ;;
    esac
done

function build_containers() {
    [ $DRY_RUN == 1 ] && echo "--dry-run not supported for build_containers, sorry!" && exit 1

    for f in k8s/**/flake.nix; do
        flake=$(dirname "$f")
        target="./${flake}#stream-docker"
        result=$(nix build "$target" --no-link --print-out-paths)

        # Note: we're intentionally using ' here instead of " because we want
        # the $ chars to be passed as-is to `nix eval`.
        # shellcheck disable=SC2016
        immutable_image=$(nix eval "$target" --raw --apply 'img: "${img.imageName}:${img.imageTag}"')
        # shellcheck disable=SC2016
        latest_image=$(nix eval "$target" --raw --apply 'img: "${img.imageName}:latest"')

        fq_immutable_name=docker://containers.snow.jflei.com/$immutable_image
        fq_latest_name=docker://containers.snow.jflei.com/$latest_image

        # Only build and upload the image if it doesn't already exist remotely.
        if ! skopeo inspect "$fq_immutable_name" &>/dev/null; then
            $result | gzip --fast | skopeo --insecure-policy copy docker-archive:/dev/stdin "$fq_immutable_name"
        fi

        # Finally, tag it as the latest version.
        skopeo --insecure-policy copy --preserve-digests --quiet "$fq_immutable_name" "$fq_latest_name"

        # TODO: restart affected deployments, or (better) use immutable image tags in manifests.
    done
}

function deploy_k8s() {
    [ $DRY_RUN == 1 ] && echo "--dry-run not supported for deploy_k8s, sorry!" && exit 1

    for f in k8s/**/*{.yaml,.yaml.secret}; do
        echo "Applying $f"
        kubectl apply -f "$f"
    done

    pulumi up --cwd k8s-pulumi --stack dev --yes
}

function deploy_nix() {
    local target="$1"
    shift

    if [ "$target" = "$(hostname)" ]; then
        if [ $DRY_RUN == 1 ]; then
            echo "Building (but not deploying!) new system..."
            new_system=$(nix build .#nixosConfigurations.pattern.config.system.build.toplevel --print-out-paths --no-link)
            nvd diff /run/current-system "$new_system"
            exit 0
        fi

        colmena apply-local --sudo
    else
        [ $DRY_RUN == 1 ] && echo "--dry-run not supported for deploy_nix for remote hosts, sorry!" && exit 1
        colmena apply --on "$target"
    fi
}

function deploy_nix_router() {
    local target="$1"
    shift

    hostname=${target#openwrt/}
    echo "Deploying to $hostname"

    # Note: we use pkgs.deage in these routers, which means we have to do
    # impure builds. Perhaps we can figure out some clever way of doing
    # something like agenix instead?
    purity="--impure"

    flake="./$target#my-router"
    # First, check if the version currently installed/running is already up to date?
    #
    desired_nix_version=$(nix eval "$flake" $purity --raw --apply 'r: r.hack-nix-version')
    if actual_nix_version=$(ssh "$hostname" cat /etc/nix-build-version); then
        :
    else
        if [ $FORCE == 1 ]; then
            echo "Could not determine current version of $hostname. --force was specified, so I'm going to keep moving forward and see what happens."
            actual_nix_version="???"
        else
            echo "Could not determine current version of $hostname. Try again with --force to ignore."
            exit 1
        fi
    fi

    if [ "$desired_nix_version" = "$actual_nix_version" ]; then
        echo "It looks like $hostname is already up to date (running $actual_nix_version). Not doing anything to it!"
        exit 0
    fi

    echo "It looks $hostname is out of date (desired $desired_nix_version, running: $actual_nix_version)"

    # Basically copying
    # https://openwrt.org/docs/guide-user/installation/sysupgrade.cli#command-line_instructions
    result=$(nix build "$flake" --no-link --print-out-paths $purity)
    files=("$result"/*-sysupgrade.*)
    file=${files[0]}
    echo "Successfully built $file"
    if [ $DRY_RUN == 1 ]; then
        echo "Not actually deploying $file because we're doing a dry run"
    else
        dest_filename=/tmp/firmware_image-sysupgrade
        scp -O "$file" "$hostname":$dest_filename
        ssh "$hostname" sysupgrade -v -n $dest_filename
    fi
}

tools/deage

if [ "$target" = "k8s" ]; then
    build_containers
    deploy_k8s
elif [[ $target == "openwrt/"* ]]; then
    deploy_nix_router "$target"
else
    deploy_nix "$target"
fi
