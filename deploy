#!/usr/bin/env bash

set -euo pipefail
shopt -s globstar

help() {
    echo "Usage: $0 [target]

To deploy all machines:

    ./deploy '*'

To deploy one machine:

    ./deploy 'dallben'

Options:

    --dry-run: build, but do not apply the updated configuration
" >/dev/stderr
}

target=""
DRY_RUN=0
FORCE=0
for i in "$@"; do
    case $i in
        --dry-run)
            DRY_RUN=1
            ;;
        --force)
            FORCE=1
            ;;
        --help | -h)
            help
            exit 0
            ;;
        --* | -*)
            echo "Unknown option $i" >/dev/stderr
            echo "" >/dev/stderr
            help
            exit 1
            ;;
        *)
            if [ -n "$target" ]; then
                echo "You must specify exactly one target" >/dev/stderr
                echo "" >/dev/stderr
                help
                exit 1

            fi
            target=$i
            ;;
    esac
done

function build_containers() {
    [ $DRY_RUN == 1 ] && echo "--dry-run not supported for build_containers, sorry!" && exit 1

    for f in k8s/**/flake.nix; do
        flake=$(dirname "$f")
        target="./${flake}#stream-docker"
        result=$(nix build "$target" --no-link --print-out-paths)

        # Note: we're intentionally using ' here instead of " because we want
        # the $ chars to be passed as-is to `nix eval`.
        # shellcheck disable=SC2016
        immutable_image=$(nix eval "$target" --raw --apply 'img: "${img.imageName}:${img.imageTag}"')
        # shellcheck disable=SC2016
        latest_image=$(nix eval "$target" --raw --apply 'img: "${img.imageName}:latest"')

        fq_immutable_name=docker://containers.snow.jflei.com/$immutable_image
        fq_latest_name=docker://containers.snow.jflei.com/$latest_image

        # Only build and upload the image if it doesn't already exist remotely.
        if ! skopeo inspect "$fq_immutable_name" &>/dev/null; then
            $result | gzip --fast | skopeo --insecure-policy copy docker-archive:/dev/stdin "$fq_immutable_name"
        fi

        # Finally, tag it as the latest version.
        skopeo --insecure-policy copy --preserve-digests --quiet "$fq_immutable_name" "$fq_latest_name"

        # TODO: restart affected deployments, or (better) use immutable image tags in manifests.
    done
}

function deploy_k8s() {
    [ $DRY_RUN == 1 ] && echo "--dry-run not supported for deploy_k8s, sorry!" && exit 1

    for f in k8s/**/*{.yaml,.yaml.secret}; do
        echo "Applying $f"
        kubectl apply -f "$f"
    done

    pulumi up --cwd k8s-pulumi --stack dev --yes
}

function deploy_nix() {
    local target="$1"
    shift

    if [ "$target" = "$(hostname)" ]; then
        if [ $DRY_RUN == 1 ]; then
            echo "Building (but not deploying!) new system..."
            new_system=$(nix build .#nixosConfigurations.pattern.config.system.build.toplevel --print-out-paths --no-link)
            nvd diff /run/current-system "$new_system"
            exit 0
        fi

        nixos-rebuild switch --use-remote-sudo --flake ".#$target"
    else
        [ $DRY_RUN == 1 ] && echo "--dry-run not supported for deploy_nix for remote hosts, sorry!" && exit 1
        # Note: --impure is a workaround for https://github.com/zhaofengli/colmena/issues/202
        colmena apply --on "$target" --impure
    fi
}

function deploy_nix_router() {
    local target="$1"
    shift

    extra_args=()
    if [ "$DRY_RUN" == 1 ]; then
        extra_args+=("--dry-run")
    fi
    if [ "$FORCE" == 1 ]; then
        extra_args+=("--force")
    fi

    hostname=${target#openwrt/}
    (cd openwrt && nix run '.#deploy' -- "$hostname" "${extra_args[@]}")
}

tools/deage

if [ "$target" = "k8s" ]; then
    build_containers
    deploy_k8s
elif [[ $target == "openwrt/"* ]]; then
    deploy_nix_router "$target"
else
    deploy_nix "$target"
fi
