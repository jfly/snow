apiVersion: v1
kind: Secret
metadata:
  name: cloudflare-api-token-secret
  # Must be the same as the namespace where the cert-manager controller pod runs!
  # https://github.com/cert-manager/cert-manager/issues/263
  namespace: cert-manager
type: Opaque
stringData:
  api-token: |-
    -----BEGIN AGE ENCRYPTED FILE-----
    YWdlLWVuY3J5cHRpb24ub3JnL3YxCi0+IFgyNTUxOSBwSk04QThSK2FoS2JRdkxY
    N0dYQ2JqTEErakszVWNyVmV1ZlRJOHZ1NUFRCkZPZFFoL1dISlpSdXpSRFA3Smg5
    U2JPeVo0Z0pzckcycHZlMzJ2SElsT2sKLS0tIEJ4bk5xQTdpUEZwbURyWFY2bG44
    cXJRcjlUd0UwTmJkTjlDZ0FUVGxESDQKNwGDW7Rq7Lm9zE+izZrIVBdlJ2TvOrZs
    NHPbfaRtZCNA0yxjZCjEte+LZU6XEbiWXGiymss+xtkYg8Cq4ivnG8OX48D9GxCg
    -----END AGE ENCRYPTED FILE-----
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    email: jeremyfleischman@gmail.com
    privateKeySecretRef:
      name: prod-issuer-account-key
    server: https://acme-v02.api.letsencrypt.org/directory
    solvers:
      - dns01:
          cloudflare:
            apiTokenSecretRef:
              name: cloudflare-api-token-secret
              key: api-token
        selector: {}
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: http-to-https
spec:
  redirectScheme:
    scheme: https
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: http-to-https
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: web
    traefik.ingress.kubernetes.io/router.middlewares: default-http-to-https@kubernetescrd
spec:
  defaultBackend:
    # This is weird, because there shouldn't be any
    # possibility of any of these rules matching a request (because of the
    # http-to-https middleware that happens before).
    # TODO: create some a standard blackhole service to point these sort of
    # things at.
    service:
      name: snow-web
      port:
        number: 80
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: snow-web
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.middlewares: default-snowauth@kubernetescrd
spec:
  tls:
    - hosts:
      - snow.jflei.com
      - '*.snow.jflei.com'
      secretName: snow-web-tls
  rules:
  - host: snow.jflei.com
    http: &snow-web
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: snow-web
              port:
                number: 80
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: lloyd
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.middlewares: default-snowauth@kubernetescrd
spec:
  tls:
    - hosts:
      - lloyd.snow.jflei.com
      secretName: lloyd-tls
  rules:
  - host: lloyd.snow.jflei.com
    http:
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: snow-web
              port:
                number: 80
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: media
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.middlewares: default-snowauth@kubernetescrd
spec:
  tls:
    - hosts:
      - media.snow.jflei.com
      secretName: media-tls
  rules:
  - host: media.snow.jflei.com
    http:
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: snow-web
              port:
                number: 80
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: media
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.middlewares: default-snowauth@kubernetescrd
spec:
  tls:
    - hosts:
      - media.snow.jflei.com
      secretName: media-tls
  rules:
  - host: media.snow.jflei.com
    http:
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: snow-web
              port:
                number: 80
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: kodi
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.middlewares: default-snowauth@kubernetescrd
spec:
  tls:
    - hosts:
      - kodi.snow.jflei.com
      secretName: kodi-tls
  rules:
  - host: kodi.snow.jflei.com
    http:
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: snow-web
              port:
                number: 80
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: tnoodle-redirect
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
spec:
  tls:
    - hosts:
      - www.tnoodle.tk
      secretName: tnoodle-tls
  rules:
    - host: www.tnoodle.tk
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: snow-web
                port:
                  number: 80
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: snow-web
spec:
  replicas: 1
  selector:
    matchLabels:
      app: snow-web
  template:
    metadata:
      labels:
        app: snow-web
    spec:
      hostname: snow-web
      volumes:
      - name: mnt-media
        hostPath:
          path: /mnt/media
      containers:
        - name: snow-web
          image: containers.snow.jflei.com/snow-web:latest
          imagePullPolicy: Always
          volumeMounts:
            - name: mnt-media
              mountPath: /mnt/media

---
apiVersion: v1
kind: Service
metadata:
  name: snow-web

spec:
  ports:
    - name: http
      port: 80
  selector:
    app: snow-web
