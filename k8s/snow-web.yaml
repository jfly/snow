apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    email: jeremyfleischman@gmail.com
    privateKeySecretRef:
      name: prod-issuer-account-key
    server: https://acme-v02.api.letsencrypt.org/directory
    solvers:
      - http01:
          ingress:
            class: traefik
        selector: {}
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: http-to-https
spec:
  redirectScheme:
    scheme: https
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: http-to-https
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: web
    traefik.ingress.kubernetes.io/router.middlewares: default-http-to-https@kubernetescrd
spec:
  defaultBackend:
    # This is weird, because there shouldn't be any
    # possibility of any of these rules matching a request (because of the
    # http-to-https middleware that happens before).
    # TODO: create some a standard blackhole service to point these sort of
    # things at.
    service:
      name: snow-web
      port:
        number: 80
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: snow-web
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
spec:
  tls:
    - hosts:
      - clark.snowdon.jflei.com
      # TODO - sonarr.clark.snowdon.jflei.com
      secretName: snow-web-tls
  rules:
  - host: clark.snowdon.jflei.com
    http: &snow-web
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: snow-web
              port:
                number: 80
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: lloyd
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
spec:
  tls:
    - hosts:
      - lloyd.clark.snowdon.jflei.com
      secretName: lloyd-tls
  rules:
  - host: lloyd.clark.snowdon.jflei.com
    http:
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: snow-web
              port:
                number: 80
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: media
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
spec:
  tls:
    - hosts:
      - media.clark.snowdon.jflei.com
      secretName: media-tls
  rules:
  - host: media.clark.snowdon.jflei.com
    http:
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: snow-web
              port:
                number: 80
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: media
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
spec:
  tls:
    - hosts:
      - media.clark.snowdon.jflei.com
      secretName: media-tls
  rules:
  - host: media.clark.snowdon.jflei.com
    http:
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: snow-web
              port:
                number: 80
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: home-assistant
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
spec:
  tls:
    - hosts:
      - home-assistant.clark.snowdon.jflei.com
      secretName: home-assistant-tls
  rules:
  - host: home-assistant.clark.snowdon.jflei.com
    http:
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: snow-web
              port:
                number: 80
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: kodi
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
spec:
  tls:
    - hosts:
      - kodi.clark.snowdon.jflei.com
      secretName: kodi-tls
  rules:
  - host: kodi.clark.snowdon.jflei.com
    http:
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: snow-web
              port:
                number: 80
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: tnoodle-redirect
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
spec:
  tls:
    - hosts:
      - www.tnoodle.tk
      secretName: tnoodle-tls
  rules:
    - host: www.tnoodle.tk
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: snow-web
                port:
                  number: 80
---
apiVersion: v1
kind: Service
metadata:
  name: snow-web
spec:
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
---
apiVersion: v1
kind: Endpoints
metadata:
  name: snow-web
subsets:
  - addresses:
      - ip: 192.168.1.100
    ports:
      - port: 8080
