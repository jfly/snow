# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'MiddlewareSpec',
    'MiddlewareSpecAddPrefix',
    'MiddlewareSpecBasicAuth',
    'MiddlewareSpecBuffering',
    'MiddlewareSpecChain',
    'MiddlewareSpecChainMiddlewares',
    'MiddlewareSpecCircuitBreaker',
    'MiddlewareSpecCompress',
    'MiddlewareSpecContentType',
    'MiddlewareSpecDigestAuth',
    'MiddlewareSpecErrors',
    'MiddlewareSpecErrorsService',
    'MiddlewareSpecErrorsServiceResponseForwarding',
    'MiddlewareSpecErrorsServiceSticky',
    'MiddlewareSpecErrorsServiceStickyCookie',
    'MiddlewareSpecForwardAuth',
    'MiddlewareSpecForwardAuthTls',
    'MiddlewareSpecHeaders',
    'MiddlewareSpecInFlightReq',
    'MiddlewareSpecInFlightReqSourceCriterion',
    'MiddlewareSpecInFlightReqSourceCriterionIpStrategy',
    'MiddlewareSpecIpWhiteList',
    'MiddlewareSpecIpWhiteListIpStrategy',
    'MiddlewareSpecPassTLSClientCert',
    'MiddlewareSpecPassTLSClientCertInfo',
    'MiddlewareSpecPassTLSClientCertInfoIssuer',
    'MiddlewareSpecPassTLSClientCertInfoSubject',
    'MiddlewareSpecRateLimit',
    'MiddlewareSpecRateLimitSourceCriterion',
    'MiddlewareSpecRateLimitSourceCriterionIpStrategy',
    'MiddlewareSpecRedirectRegex',
    'MiddlewareSpecRedirectScheme',
    'MiddlewareSpecReplacePath',
    'MiddlewareSpecReplacePathRegex',
    'MiddlewareSpecRetry',
    'MiddlewareSpecStripPrefix',
    'MiddlewareSpecStripPrefixRegex',
]

@pulumi.output_type
class MiddlewareSpec(dict):
    """
    MiddlewareSpec defines the desired state of a Middleware.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addPrefix":
            suggest = "add_prefix"
        elif key == "basicAuth":
            suggest = "basic_auth"
        elif key == "circuitBreaker":
            suggest = "circuit_breaker"
        elif key == "contentType":
            suggest = "content_type"
        elif key == "digestAuth":
            suggest = "digest_auth"
        elif key == "forwardAuth":
            suggest = "forward_auth"
        elif key == "inFlightReq":
            suggest = "in_flight_req"
        elif key == "ipWhiteList":
            suggest = "ip_white_list"
        elif key == "passTLSClientCert":
            suggest = "pass_tls_client_cert"
        elif key == "rateLimit":
            suggest = "rate_limit"
        elif key == "redirectRegex":
            suggest = "redirect_regex"
        elif key == "redirectScheme":
            suggest = "redirect_scheme"
        elif key == "replacePath":
            suggest = "replace_path"
        elif key == "replacePathRegex":
            suggest = "replace_path_regex"
        elif key == "stripPrefix":
            suggest = "strip_prefix"
        elif key == "stripPrefixRegex":
            suggest = "strip_prefix_regex"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MiddlewareSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MiddlewareSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MiddlewareSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 add_prefix: Optional['outputs.MiddlewareSpecAddPrefix'] = None,
                 basic_auth: Optional['outputs.MiddlewareSpecBasicAuth'] = None,
                 buffering: Optional['outputs.MiddlewareSpecBuffering'] = None,
                 chain: Optional['outputs.MiddlewareSpecChain'] = None,
                 circuit_breaker: Optional['outputs.MiddlewareSpecCircuitBreaker'] = None,
                 compress: Optional['outputs.MiddlewareSpecCompress'] = None,
                 content_type: Optional['outputs.MiddlewareSpecContentType'] = None,
                 digest_auth: Optional['outputs.MiddlewareSpecDigestAuth'] = None,
                 errors: Optional['outputs.MiddlewareSpecErrors'] = None,
                 forward_auth: Optional['outputs.MiddlewareSpecForwardAuth'] = None,
                 headers: Optional['outputs.MiddlewareSpecHeaders'] = None,
                 in_flight_req: Optional['outputs.MiddlewareSpecInFlightReq'] = None,
                 ip_white_list: Optional['outputs.MiddlewareSpecIpWhiteList'] = None,
                 pass_tls_client_cert: Optional['outputs.MiddlewareSpecPassTLSClientCert'] = None,
                 plugin: Optional[Mapping[str, Mapping[str, Any]]] = None,
                 rate_limit: Optional['outputs.MiddlewareSpecRateLimit'] = None,
                 redirect_regex: Optional['outputs.MiddlewareSpecRedirectRegex'] = None,
                 redirect_scheme: Optional['outputs.MiddlewareSpecRedirectScheme'] = None,
                 replace_path: Optional['outputs.MiddlewareSpecReplacePath'] = None,
                 replace_path_regex: Optional['outputs.MiddlewareSpecReplacePathRegex'] = None,
                 retry: Optional['outputs.MiddlewareSpecRetry'] = None,
                 strip_prefix: Optional['outputs.MiddlewareSpecStripPrefix'] = None,
                 strip_prefix_regex: Optional['outputs.MiddlewareSpecStripPrefixRegex'] = None):
        """
        MiddlewareSpec defines the desired state of a Middleware.
        :param 'MiddlewareSpecAddPrefixArgs' add_prefix: AddPrefix holds the add prefix middleware configuration. This middleware updates the path of a request before forwarding it. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/addprefix/
        :param 'MiddlewareSpecBasicAuthArgs' basic_auth: BasicAuth holds the basic auth middleware configuration. This middleware restricts access to your services to known users. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/basicauth/
        :param 'MiddlewareSpecBufferingArgs' buffering: Buffering holds the buffering middleware configuration. This middleware retries or limits the size of requests that can be forwarded to backends. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/buffering/#maxrequestbodybytes
        :param 'MiddlewareSpecChainArgs' chain: Chain holds the configuration of the chain middleware. This middleware enables to define reusable combinations of other pieces of middleware. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/chain/
        :param 'MiddlewareSpecCircuitBreakerArgs' circuit_breaker: CircuitBreaker holds the circuit breaker configuration.
        :param 'MiddlewareSpecCompressArgs' compress: Compress holds the compress middleware configuration. This middleware compresses responses before sending them to the client, using gzip compression. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/compress/
        :param 'MiddlewareSpecContentTypeArgs' content_type: ContentType holds the content-type middleware configuration. This middleware exists to enable the correct behavior until at least the default one can be changed in a future version.
        :param 'MiddlewareSpecDigestAuthArgs' digest_auth: DigestAuth holds the digest auth middleware configuration. This middleware restricts access to your services to known users. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/digestauth/
        :param 'MiddlewareSpecErrorsArgs' errors: ErrorPage holds the custom error middleware configuration. This middleware returns a custom page in lieu of the default, according to configured ranges of HTTP Status codes. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/errorpages/
        :param 'MiddlewareSpecForwardAuthArgs' forward_auth: ForwardAuth holds the forward auth middleware configuration. This middleware delegates the request authentication to a Service. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/forwardauth/
        :param 'MiddlewareSpecHeadersArgs' headers: Headers holds the headers middleware configuration. This middleware manages the requests and responses headers. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/headers/#customrequestheaders
        :param 'MiddlewareSpecInFlightReqArgs' in_flight_req: InFlightReq holds the in-flight request middleware configuration. This middleware limits the number of requests being processed and served concurrently. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/inflightreq/
        :param 'MiddlewareSpecIpWhiteListArgs' ip_white_list: IPWhiteList holds the IP whitelist middleware configuration. This middleware accepts / refuses requests based on the client IP. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/ipwhitelist/
        :param 'MiddlewareSpecPassTLSClientCertArgs' pass_tls_client_cert: PassTLSClientCert holds the pass TLS client cert middleware configuration. This middleware adds the selected data from the passed client TLS certificate to a header. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/passtlsclientcert/
        :param Mapping[str, Mapping[str, Any]] plugin: Plugin defines the middleware plugin configuration. More info: https://doc.traefik.io/traefik/plugins/
        :param 'MiddlewareSpecRateLimitArgs' rate_limit: RateLimit holds the rate limit configuration. This middleware ensures that services will receive a fair amount of requests, and allows one to define what fair is. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/ratelimit/
        :param 'MiddlewareSpecRedirectRegexArgs' redirect_regex: RedirectRegex holds the redirect regex middleware configuration. This middleware redirects a request using regex matching and replacement. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/redirectregex/#regex
        :param 'MiddlewareSpecRedirectSchemeArgs' redirect_scheme: RedirectScheme holds the redirect scheme middleware configuration. This middleware redirects requests from a scheme/port to another. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/redirectscheme/
        :param 'MiddlewareSpecReplacePathArgs' replace_path: ReplacePath holds the replace path middleware configuration. This middleware replaces the path of the request URL and store the original path in an X-Replaced-Path header. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/replacepath/
        :param 'MiddlewareSpecReplacePathRegexArgs' replace_path_regex: ReplacePathRegex holds the replace path regex middleware configuration. This middleware replaces the path of a URL using regex matching and replacement. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/replacepathregex/
        :param 'MiddlewareSpecRetryArgs' retry: Retry holds the retry middleware configuration. This middleware reissues requests a given number of times to a backend server if that server does not reply. As soon as the server answers, the middleware stops retrying, regardless of the response status. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/retry/
        :param 'MiddlewareSpecStripPrefixArgs' strip_prefix: StripPrefix holds the strip prefix middleware configuration. This middleware removes the specified prefixes from the URL path. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/stripprefix/
        :param 'MiddlewareSpecStripPrefixRegexArgs' strip_prefix_regex: StripPrefixRegex holds the strip prefix regex middleware configuration. This middleware removes the matching prefixes from the URL path. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/stripprefixregex/
        """
        if add_prefix is not None:
            pulumi.set(__self__, "add_prefix", add_prefix)
        if basic_auth is not None:
            pulumi.set(__self__, "basic_auth", basic_auth)
        if buffering is not None:
            pulumi.set(__self__, "buffering", buffering)
        if chain is not None:
            pulumi.set(__self__, "chain", chain)
        if circuit_breaker is not None:
            pulumi.set(__self__, "circuit_breaker", circuit_breaker)
        if compress is not None:
            pulumi.set(__self__, "compress", compress)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if digest_auth is not None:
            pulumi.set(__self__, "digest_auth", digest_auth)
        if errors is not None:
            pulumi.set(__self__, "errors", errors)
        if forward_auth is not None:
            pulumi.set(__self__, "forward_auth", forward_auth)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if in_flight_req is not None:
            pulumi.set(__self__, "in_flight_req", in_flight_req)
        if ip_white_list is not None:
            pulumi.set(__self__, "ip_white_list", ip_white_list)
        if pass_tls_client_cert is not None:
            pulumi.set(__self__, "pass_tls_client_cert", pass_tls_client_cert)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if rate_limit is not None:
            pulumi.set(__self__, "rate_limit", rate_limit)
        if redirect_regex is not None:
            pulumi.set(__self__, "redirect_regex", redirect_regex)
        if redirect_scheme is not None:
            pulumi.set(__self__, "redirect_scheme", redirect_scheme)
        if replace_path is not None:
            pulumi.set(__self__, "replace_path", replace_path)
        if replace_path_regex is not None:
            pulumi.set(__self__, "replace_path_regex", replace_path_regex)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if strip_prefix is not None:
            pulumi.set(__self__, "strip_prefix", strip_prefix)
        if strip_prefix_regex is not None:
            pulumi.set(__self__, "strip_prefix_regex", strip_prefix_regex)

    @property
    @pulumi.getter(name="addPrefix")
    def add_prefix(self) -> Optional['outputs.MiddlewareSpecAddPrefix']:
        """
        AddPrefix holds the add prefix middleware configuration. This middleware updates the path of a request before forwarding it. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/addprefix/
        """
        return pulumi.get(self, "add_prefix")

    @property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> Optional['outputs.MiddlewareSpecBasicAuth']:
        """
        BasicAuth holds the basic auth middleware configuration. This middleware restricts access to your services to known users. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/basicauth/
        """
        return pulumi.get(self, "basic_auth")

    @property
    @pulumi.getter
    def buffering(self) -> Optional['outputs.MiddlewareSpecBuffering']:
        """
        Buffering holds the buffering middleware configuration. This middleware retries or limits the size of requests that can be forwarded to backends. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/buffering/#maxrequestbodybytes
        """
        return pulumi.get(self, "buffering")

    @property
    @pulumi.getter
    def chain(self) -> Optional['outputs.MiddlewareSpecChain']:
        """
        Chain holds the configuration of the chain middleware. This middleware enables to define reusable combinations of other pieces of middleware. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/chain/
        """
        return pulumi.get(self, "chain")

    @property
    @pulumi.getter(name="circuitBreaker")
    def circuit_breaker(self) -> Optional['outputs.MiddlewareSpecCircuitBreaker']:
        """
        CircuitBreaker holds the circuit breaker configuration.
        """
        return pulumi.get(self, "circuit_breaker")

    @property
    @pulumi.getter
    def compress(self) -> Optional['outputs.MiddlewareSpecCompress']:
        """
        Compress holds the compress middleware configuration. This middleware compresses responses before sending them to the client, using gzip compression. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/compress/
        """
        return pulumi.get(self, "compress")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional['outputs.MiddlewareSpecContentType']:
        """
        ContentType holds the content-type middleware configuration. This middleware exists to enable the correct behavior until at least the default one can be changed in a future version.
        """
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="digestAuth")
    def digest_auth(self) -> Optional['outputs.MiddlewareSpecDigestAuth']:
        """
        DigestAuth holds the digest auth middleware configuration. This middleware restricts access to your services to known users. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/digestauth/
        """
        return pulumi.get(self, "digest_auth")

    @property
    @pulumi.getter
    def errors(self) -> Optional['outputs.MiddlewareSpecErrors']:
        """
        ErrorPage holds the custom error middleware configuration. This middleware returns a custom page in lieu of the default, according to configured ranges of HTTP Status codes. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/errorpages/
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter(name="forwardAuth")
    def forward_auth(self) -> Optional['outputs.MiddlewareSpecForwardAuth']:
        """
        ForwardAuth holds the forward auth middleware configuration. This middleware delegates the request authentication to a Service. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/forwardauth/
        """
        return pulumi.get(self, "forward_auth")

    @property
    @pulumi.getter
    def headers(self) -> Optional['outputs.MiddlewareSpecHeaders']:
        """
        Headers holds the headers middleware configuration. This middleware manages the requests and responses headers. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/headers/#customrequestheaders
        """
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="inFlightReq")
    def in_flight_req(self) -> Optional['outputs.MiddlewareSpecInFlightReq']:
        """
        InFlightReq holds the in-flight request middleware configuration. This middleware limits the number of requests being processed and served concurrently. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/inflightreq/
        """
        return pulumi.get(self, "in_flight_req")

    @property
    @pulumi.getter(name="ipWhiteList")
    def ip_white_list(self) -> Optional['outputs.MiddlewareSpecIpWhiteList']:
        """
        IPWhiteList holds the IP whitelist middleware configuration. This middleware accepts / refuses requests based on the client IP. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/ipwhitelist/
        """
        return pulumi.get(self, "ip_white_list")

    @property
    @pulumi.getter(name="passTLSClientCert")
    def pass_tls_client_cert(self) -> Optional['outputs.MiddlewareSpecPassTLSClientCert']:
        """
        PassTLSClientCert holds the pass TLS client cert middleware configuration. This middleware adds the selected data from the passed client TLS certificate to a header. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/passtlsclientcert/
        """
        return pulumi.get(self, "pass_tls_client_cert")

    @property
    @pulumi.getter
    def plugin(self) -> Optional[Mapping[str, Mapping[str, Any]]]:
        """
        Plugin defines the middleware plugin configuration. More info: https://doc.traefik.io/traefik/plugins/
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter(name="rateLimit")
    def rate_limit(self) -> Optional['outputs.MiddlewareSpecRateLimit']:
        """
        RateLimit holds the rate limit configuration. This middleware ensures that services will receive a fair amount of requests, and allows one to define what fair is. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/ratelimit/
        """
        return pulumi.get(self, "rate_limit")

    @property
    @pulumi.getter(name="redirectRegex")
    def redirect_regex(self) -> Optional['outputs.MiddlewareSpecRedirectRegex']:
        """
        RedirectRegex holds the redirect regex middleware configuration. This middleware redirects a request using regex matching and replacement. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/redirectregex/#regex
        """
        return pulumi.get(self, "redirect_regex")

    @property
    @pulumi.getter(name="redirectScheme")
    def redirect_scheme(self) -> Optional['outputs.MiddlewareSpecRedirectScheme']:
        """
        RedirectScheme holds the redirect scheme middleware configuration. This middleware redirects requests from a scheme/port to another. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/redirectscheme/
        """
        return pulumi.get(self, "redirect_scheme")

    @property
    @pulumi.getter(name="replacePath")
    def replace_path(self) -> Optional['outputs.MiddlewareSpecReplacePath']:
        """
        ReplacePath holds the replace path middleware configuration. This middleware replaces the path of the request URL and store the original path in an X-Replaced-Path header. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/replacepath/
        """
        return pulumi.get(self, "replace_path")

    @property
    @pulumi.getter(name="replacePathRegex")
    def replace_path_regex(self) -> Optional['outputs.MiddlewareSpecReplacePathRegex']:
        """
        ReplacePathRegex holds the replace path regex middleware configuration. This middleware replaces the path of a URL using regex matching and replacement. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/replacepathregex/
        """
        return pulumi.get(self, "replace_path_regex")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.MiddlewareSpecRetry']:
        """
        Retry holds the retry middleware configuration. This middleware reissues requests a given number of times to a backend server if that server does not reply. As soon as the server answers, the middleware stops retrying, regardless of the response status. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/retry/
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="stripPrefix")
    def strip_prefix(self) -> Optional['outputs.MiddlewareSpecStripPrefix']:
        """
        StripPrefix holds the strip prefix middleware configuration. This middleware removes the specified prefixes from the URL path. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/stripprefix/
        """
        return pulumi.get(self, "strip_prefix")

    @property
    @pulumi.getter(name="stripPrefixRegex")
    def strip_prefix_regex(self) -> Optional['outputs.MiddlewareSpecStripPrefixRegex']:
        """
        StripPrefixRegex holds the strip prefix regex middleware configuration. This middleware removes the matching prefixes from the URL path. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/stripprefixregex/
        """
        return pulumi.get(self, "strip_prefix_regex")


@pulumi.output_type
class MiddlewareSpecAddPrefix(dict):
    """
    AddPrefix holds the add prefix middleware configuration. This middleware updates the path of a request before forwarding it. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/addprefix/
    """
    def __init__(__self__, *,
                 prefix: Optional[str] = None):
        """
        AddPrefix holds the add prefix middleware configuration. This middleware updates the path of a request before forwarding it. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/addprefix/
        :param str prefix: Prefix is the string to add before the current path in the requested URL. It should include a leading slash (/).
        """
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        Prefix is the string to add before the current path in the requested URL. It should include a leading slash (/).
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class MiddlewareSpecBasicAuth(dict):
    """
    BasicAuth holds the basic auth middleware configuration. This middleware restricts access to your services to known users. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/basicauth/
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "headerField":
            suggest = "header_field"
        elif key == "removeHeader":
            suggest = "remove_header"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MiddlewareSpecBasicAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MiddlewareSpecBasicAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MiddlewareSpecBasicAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 header_field: Optional[str] = None,
                 realm: Optional[str] = None,
                 remove_header: Optional[bool] = None,
                 secret: Optional[str] = None):
        """
        BasicAuth holds the basic auth middleware configuration. This middleware restricts access to your services to known users. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/basicauth/
        :param str header_field: HeaderField defines a header field to store the authenticated user. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/basicauth/#headerfield
        :param str realm: Realm allows the protected resources on a server to be partitioned into a set of protection spaces, each with its own authentication scheme. Default: traefik.
        :param bool remove_header: RemoveHeader sets the removeHeader option to true to remove the authorization header before forwarding the request to your service. Default: false.
        :param str secret: Secret is the name of the referenced Kubernetes Secret containing user credentials.
        """
        if header_field is not None:
            pulumi.set(__self__, "header_field", header_field)
        if realm is not None:
            pulumi.set(__self__, "realm", realm)
        if remove_header is not None:
            pulumi.set(__self__, "remove_header", remove_header)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="headerField")
    def header_field(self) -> Optional[str]:
        """
        HeaderField defines a header field to store the authenticated user. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/basicauth/#headerfield
        """
        return pulumi.get(self, "header_field")

    @property
    @pulumi.getter
    def realm(self) -> Optional[str]:
        """
        Realm allows the protected resources on a server to be partitioned into a set of protection spaces, each with its own authentication scheme. Default: traefik.
        """
        return pulumi.get(self, "realm")

    @property
    @pulumi.getter(name="removeHeader")
    def remove_header(self) -> Optional[bool]:
        """
        RemoveHeader sets the removeHeader option to true to remove the authorization header before forwarding the request to your service. Default: false.
        """
        return pulumi.get(self, "remove_header")

    @property
    @pulumi.getter
    def secret(self) -> Optional[str]:
        """
        Secret is the name of the referenced Kubernetes Secret containing user credentials.
        """
        return pulumi.get(self, "secret")


@pulumi.output_type
class MiddlewareSpecBuffering(dict):
    """
    Buffering holds the buffering middleware configuration. This middleware retries or limits the size of requests that can be forwarded to backends. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/buffering/#maxrequestbodybytes
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxRequestBodyBytes":
            suggest = "max_request_body_bytes"
        elif key == "maxResponseBodyBytes":
            suggest = "max_response_body_bytes"
        elif key == "memRequestBodyBytes":
            suggest = "mem_request_body_bytes"
        elif key == "memResponseBodyBytes":
            suggest = "mem_response_body_bytes"
        elif key == "retryExpression":
            suggest = "retry_expression"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MiddlewareSpecBuffering. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MiddlewareSpecBuffering.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MiddlewareSpecBuffering.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_request_body_bytes: Optional[int] = None,
                 max_response_body_bytes: Optional[int] = None,
                 mem_request_body_bytes: Optional[int] = None,
                 mem_response_body_bytes: Optional[int] = None,
                 retry_expression: Optional[str] = None):
        """
        Buffering holds the buffering middleware configuration. This middleware retries or limits the size of requests that can be forwarded to backends. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/buffering/#maxrequestbodybytes
        :param int max_request_body_bytes: MaxRequestBodyBytes defines the maximum allowed body size for the request (in bytes). If the request exceeds the allowed size, it is not forwarded to the service, and the client gets a 413 (Request Entity Too Large) response. Default: 0 (no maximum).
        :param int max_response_body_bytes: MaxResponseBodyBytes defines the maximum allowed response size from the service (in bytes). If the response exceeds the allowed size, it is not forwarded to the client. The client gets a 500 (Internal Server Error) response instead. Default: 0 (no maximum).
        :param int mem_request_body_bytes: MemRequestBodyBytes defines the threshold (in bytes) from which the request will be buffered on disk instead of in memory. Default: 1048576 (1Mi).
        :param int mem_response_body_bytes: MemResponseBodyBytes defines the threshold (in bytes) from which the response will be buffered on disk instead of in memory. Default: 1048576 (1Mi).
        :param str retry_expression: RetryExpression defines the retry conditions. It is a logical combination of functions with operators AND (&&) and OR (||). More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/buffering/#retryexpression
        """
        if max_request_body_bytes is not None:
            pulumi.set(__self__, "max_request_body_bytes", max_request_body_bytes)
        if max_response_body_bytes is not None:
            pulumi.set(__self__, "max_response_body_bytes", max_response_body_bytes)
        if mem_request_body_bytes is not None:
            pulumi.set(__self__, "mem_request_body_bytes", mem_request_body_bytes)
        if mem_response_body_bytes is not None:
            pulumi.set(__self__, "mem_response_body_bytes", mem_response_body_bytes)
        if retry_expression is not None:
            pulumi.set(__self__, "retry_expression", retry_expression)

    @property
    @pulumi.getter(name="maxRequestBodyBytes")
    def max_request_body_bytes(self) -> Optional[int]:
        """
        MaxRequestBodyBytes defines the maximum allowed body size for the request (in bytes). If the request exceeds the allowed size, it is not forwarded to the service, and the client gets a 413 (Request Entity Too Large) response. Default: 0 (no maximum).
        """
        return pulumi.get(self, "max_request_body_bytes")

    @property
    @pulumi.getter(name="maxResponseBodyBytes")
    def max_response_body_bytes(self) -> Optional[int]:
        """
        MaxResponseBodyBytes defines the maximum allowed response size from the service (in bytes). If the response exceeds the allowed size, it is not forwarded to the client. The client gets a 500 (Internal Server Error) response instead. Default: 0 (no maximum).
        """
        return pulumi.get(self, "max_response_body_bytes")

    @property
    @pulumi.getter(name="memRequestBodyBytes")
    def mem_request_body_bytes(self) -> Optional[int]:
        """
        MemRequestBodyBytes defines the threshold (in bytes) from which the request will be buffered on disk instead of in memory. Default: 1048576 (1Mi).
        """
        return pulumi.get(self, "mem_request_body_bytes")

    @property
    @pulumi.getter(name="memResponseBodyBytes")
    def mem_response_body_bytes(self) -> Optional[int]:
        """
        MemResponseBodyBytes defines the threshold (in bytes) from which the response will be buffered on disk instead of in memory. Default: 1048576 (1Mi).
        """
        return pulumi.get(self, "mem_response_body_bytes")

    @property
    @pulumi.getter(name="retryExpression")
    def retry_expression(self) -> Optional[str]:
        """
        RetryExpression defines the retry conditions. It is a logical combination of functions with operators AND (&&) and OR (||). More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/buffering/#retryexpression
        """
        return pulumi.get(self, "retry_expression")


@pulumi.output_type
class MiddlewareSpecChain(dict):
    """
    Chain holds the configuration of the chain middleware. This middleware enables to define reusable combinations of other pieces of middleware. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/chain/
    """
    def __init__(__self__, *,
                 middlewares: Optional[Sequence['outputs.MiddlewareSpecChainMiddlewares']] = None):
        """
        Chain holds the configuration of the chain middleware. This middleware enables to define reusable combinations of other pieces of middleware. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/chain/
        :param Sequence['MiddlewareSpecChainMiddlewaresArgs'] middlewares: Middlewares is the list of MiddlewareRef which composes the chain.
        """
        if middlewares is not None:
            pulumi.set(__self__, "middlewares", middlewares)

    @property
    @pulumi.getter
    def middlewares(self) -> Optional[Sequence['outputs.MiddlewareSpecChainMiddlewares']]:
        """
        Middlewares is the list of MiddlewareRef which composes the chain.
        """
        return pulumi.get(self, "middlewares")


@pulumi.output_type
class MiddlewareSpecChainMiddlewares(dict):
    """
    MiddlewareRef is a reference to a Middleware resource.
    """
    def __init__(__self__, *,
                 name: str,
                 namespace: Optional[str] = None):
        """
        MiddlewareRef is a reference to a Middleware resource.
        :param str name: Name defines the name of the referenced Middleware resource.
        :param str namespace: Namespace defines the namespace of the referenced Middleware resource.
        """
        pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name defines the name of the referenced Middleware resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace defines the namespace of the referenced Middleware resource.
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class MiddlewareSpecCircuitBreaker(dict):
    """
    CircuitBreaker holds the circuit breaker configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "checkPeriod":
            suggest = "check_period"
        elif key == "fallbackDuration":
            suggest = "fallback_duration"
        elif key == "recoveryDuration":
            suggest = "recovery_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MiddlewareSpecCircuitBreaker. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MiddlewareSpecCircuitBreaker.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MiddlewareSpecCircuitBreaker.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 check_period: Optional[Any] = None,
                 expression: Optional[str] = None,
                 fallback_duration: Optional[Any] = None,
                 recovery_duration: Optional[Any] = None):
        """
        CircuitBreaker holds the circuit breaker configuration.
        :param Union[int, str] check_period: CheckPeriod is the interval between successive checks of the circuit breaker condition (when in standby state).
        :param str expression: Expression is the condition that triggers the tripped state.
        :param Union[int, str] fallback_duration: FallbackDuration is the duration for which the circuit breaker will wait before trying to recover (from a tripped state).
        :param Union[int, str] recovery_duration: RecoveryDuration is the duration for which the circuit breaker will try to recover (as soon as it is in recovering state).
        """
        if check_period is not None:
            pulumi.set(__self__, "check_period", check_period)
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if fallback_duration is not None:
            pulumi.set(__self__, "fallback_duration", fallback_duration)
        if recovery_duration is not None:
            pulumi.set(__self__, "recovery_duration", recovery_duration)

    @property
    @pulumi.getter(name="checkPeriod")
    def check_period(self) -> Optional[Any]:
        """
        CheckPeriod is the interval between successive checks of the circuit breaker condition (when in standby state).
        """
        return pulumi.get(self, "check_period")

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        """
        Expression is the condition that triggers the tripped state.
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter(name="fallbackDuration")
    def fallback_duration(self) -> Optional[Any]:
        """
        FallbackDuration is the duration for which the circuit breaker will wait before trying to recover (from a tripped state).
        """
        return pulumi.get(self, "fallback_duration")

    @property
    @pulumi.getter(name="recoveryDuration")
    def recovery_duration(self) -> Optional[Any]:
        """
        RecoveryDuration is the duration for which the circuit breaker will try to recover (as soon as it is in recovering state).
        """
        return pulumi.get(self, "recovery_duration")


@pulumi.output_type
class MiddlewareSpecCompress(dict):
    """
    Compress holds the compress middleware configuration. This middleware compresses responses before sending them to the client, using gzip compression. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/compress/
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "excludedContentTypes":
            suggest = "excluded_content_types"
        elif key == "minResponseBodyBytes":
            suggest = "min_response_body_bytes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MiddlewareSpecCompress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MiddlewareSpecCompress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MiddlewareSpecCompress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 excluded_content_types: Optional[Sequence[str]] = None,
                 min_response_body_bytes: Optional[int] = None):
        """
        Compress holds the compress middleware configuration. This middleware compresses responses before sending them to the client, using gzip compression. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/compress/
        :param Sequence[str] excluded_content_types: ExcludedContentTypes defines the list of content types to compare the Content-Type header of the incoming requests and responses before compressing.
        :param int min_response_body_bytes: MinResponseBodyBytes defines the minimum amount of bytes a response body must have to be compressed. Default: 1024.
        """
        if excluded_content_types is not None:
            pulumi.set(__self__, "excluded_content_types", excluded_content_types)
        if min_response_body_bytes is not None:
            pulumi.set(__self__, "min_response_body_bytes", min_response_body_bytes)

    @property
    @pulumi.getter(name="excludedContentTypes")
    def excluded_content_types(self) -> Optional[Sequence[str]]:
        """
        ExcludedContentTypes defines the list of content types to compare the Content-Type header of the incoming requests and responses before compressing.
        """
        return pulumi.get(self, "excluded_content_types")

    @property
    @pulumi.getter(name="minResponseBodyBytes")
    def min_response_body_bytes(self) -> Optional[int]:
        """
        MinResponseBodyBytes defines the minimum amount of bytes a response body must have to be compressed. Default: 1024.
        """
        return pulumi.get(self, "min_response_body_bytes")


@pulumi.output_type
class MiddlewareSpecContentType(dict):
    """
    ContentType holds the content-type middleware configuration. This middleware exists to enable the correct behavior until at least the default one can be changed in a future version.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoDetect":
            suggest = "auto_detect"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MiddlewareSpecContentType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MiddlewareSpecContentType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MiddlewareSpecContentType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_detect: Optional[bool] = None):
        """
        ContentType holds the content-type middleware configuration. This middleware exists to enable the correct behavior until at least the default one can be changed in a future version.
        :param bool auto_detect: AutoDetect specifies whether to let the `Content-Type` header, if it has not been set by the backend, be automatically set to a value derived from the contents of the response. As a proxy, the default behavior should be to leave the header alone, regardless of what the backend did with it. However, the historic default was to always auto-detect and set the header if it was nil, and it is going to be kept that way in order to support users currently relying on it.
        """
        if auto_detect is not None:
            pulumi.set(__self__, "auto_detect", auto_detect)

    @property
    @pulumi.getter(name="autoDetect")
    def auto_detect(self) -> Optional[bool]:
        """
        AutoDetect specifies whether to let the `Content-Type` header, if it has not been set by the backend, be automatically set to a value derived from the contents of the response. As a proxy, the default behavior should be to leave the header alone, regardless of what the backend did with it. However, the historic default was to always auto-detect and set the header if it was nil, and it is going to be kept that way in order to support users currently relying on it.
        """
        return pulumi.get(self, "auto_detect")


@pulumi.output_type
class MiddlewareSpecDigestAuth(dict):
    """
    DigestAuth holds the digest auth middleware configuration. This middleware restricts access to your services to known users. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/digestauth/
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "headerField":
            suggest = "header_field"
        elif key == "removeHeader":
            suggest = "remove_header"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MiddlewareSpecDigestAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MiddlewareSpecDigestAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MiddlewareSpecDigestAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 header_field: Optional[str] = None,
                 realm: Optional[str] = None,
                 remove_header: Optional[bool] = None,
                 secret: Optional[str] = None):
        """
        DigestAuth holds the digest auth middleware configuration. This middleware restricts access to your services to known users. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/digestauth/
        :param str header_field: HeaderField defines a header field to store the authenticated user. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/basicauth/#headerfield
        :param str realm: Realm allows the protected resources on a server to be partitioned into a set of protection spaces, each with its own authentication scheme. Default: traefik.
        :param bool remove_header: RemoveHeader defines whether to remove the authorization header before forwarding the request to the backend.
        :param str secret: Secret is the name of the referenced Kubernetes Secret containing user credentials.
        """
        if header_field is not None:
            pulumi.set(__self__, "header_field", header_field)
        if realm is not None:
            pulumi.set(__self__, "realm", realm)
        if remove_header is not None:
            pulumi.set(__self__, "remove_header", remove_header)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="headerField")
    def header_field(self) -> Optional[str]:
        """
        HeaderField defines a header field to store the authenticated user. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/basicauth/#headerfield
        """
        return pulumi.get(self, "header_field")

    @property
    @pulumi.getter
    def realm(self) -> Optional[str]:
        """
        Realm allows the protected resources on a server to be partitioned into a set of protection spaces, each with its own authentication scheme. Default: traefik.
        """
        return pulumi.get(self, "realm")

    @property
    @pulumi.getter(name="removeHeader")
    def remove_header(self) -> Optional[bool]:
        """
        RemoveHeader defines whether to remove the authorization header before forwarding the request to the backend.
        """
        return pulumi.get(self, "remove_header")

    @property
    @pulumi.getter
    def secret(self) -> Optional[str]:
        """
        Secret is the name of the referenced Kubernetes Secret containing user credentials.
        """
        return pulumi.get(self, "secret")


@pulumi.output_type
class MiddlewareSpecErrors(dict):
    """
    ErrorPage holds the custom error middleware configuration. This middleware returns a custom page in lieu of the default, according to configured ranges of HTTP Status codes. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/errorpages/
    """
    def __init__(__self__, *,
                 query: Optional[str] = None,
                 service: Optional['outputs.MiddlewareSpecErrorsService'] = None,
                 status: Optional[Sequence[str]] = None):
        """
        ErrorPage holds the custom error middleware configuration. This middleware returns a custom page in lieu of the default, according to configured ranges of HTTP Status codes. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/errorpages/
        :param str query: Query defines the URL for the error page (hosted by service). The {status} variable can be used in order to insert the status code in the URL.
        :param 'MiddlewareSpecErrorsServiceArgs' service: Service defines the reference to a Kubernetes Service that will serve the error page. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/errorpages/#service
        :param Sequence[str] status: Status defines which status or range of statuses should result in an error page. It can be either a status code as a number (500), as multiple comma-separated numbers (500,502), as ranges by separating two codes with a dash (500-599), or a combination of the two (404,418,500-599).
        """
        if query is not None:
            pulumi.set(__self__, "query", query)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def query(self) -> Optional[str]:
        """
        Query defines the URL for the error page (hosted by service). The {status} variable can be used in order to insert the status code in the URL.
        """
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def service(self) -> Optional['outputs.MiddlewareSpecErrorsService']:
        """
        Service defines the reference to a Kubernetes Service that will serve the error page. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/errorpages/#service
        """
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def status(self) -> Optional[Sequence[str]]:
        """
        Status defines which status or range of statuses should result in an error page. It can be either a status code as a number (500), as multiple comma-separated numbers (500,502), as ranges by separating two codes with a dash (500-599), or a combination of the two (404,418,500-599).
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class MiddlewareSpecErrorsService(dict):
    """
    Service defines the reference to a Kubernetes Service that will serve the error page. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/errorpages/#service
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "passHostHeader":
            suggest = "pass_host_header"
        elif key == "responseForwarding":
            suggest = "response_forwarding"
        elif key == "serversTransport":
            suggest = "servers_transport"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MiddlewareSpecErrorsService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MiddlewareSpecErrorsService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MiddlewareSpecErrorsService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 kind: Optional[str] = None,
                 namespace: Optional[str] = None,
                 pass_host_header: Optional[bool] = None,
                 port: Optional[Any] = None,
                 response_forwarding: Optional['outputs.MiddlewareSpecErrorsServiceResponseForwarding'] = None,
                 scheme: Optional[str] = None,
                 servers_transport: Optional[str] = None,
                 sticky: Optional['outputs.MiddlewareSpecErrorsServiceSticky'] = None,
                 strategy: Optional[str] = None,
                 weight: Optional[int] = None):
        """
        Service defines the reference to a Kubernetes Service that will serve the error page. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/errorpages/#service
        :param str name: Name defines the name of the referenced Kubernetes Service or TraefikService. The differentiation between the two is specified in the Kind field.
        :param str kind: Kind defines the kind of the Service.
        :param str namespace: Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
        :param bool pass_host_header: PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service. By default, passHostHeader is true.
        :param Union[int, str] port: Port defines the port of a Kubernetes Service. This can be a reference to a named port.
        :param 'MiddlewareSpecErrorsServiceResponseForwardingArgs' response_forwarding: ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
        :param str scheme: Scheme defines the scheme to use for the request to the upstream Kubernetes Service. It defaults to https when Kubernetes Service port is 443, http otherwise.
        :param str servers_transport: ServersTransport defines the name of ServersTransport resource to use. It allows to configure the transport between Traefik and your servers. Can only be used on a Kubernetes Service.
        :param 'MiddlewareSpecErrorsServiceStickyArgs' sticky: Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.8/routing/services/#sticky-sessions
        :param str strategy: Strategy defines the load balancing strategy between the servers. RoundRobin is the only supported value at the moment.
        :param int weight: Weight defines the weight and should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).
        """
        pulumi.set(__self__, "name", name)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if pass_host_header is not None:
            pulumi.set(__self__, "pass_host_header", pass_host_header)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if response_forwarding is not None:
            pulumi.set(__self__, "response_forwarding", response_forwarding)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)
        if servers_transport is not None:
            pulumi.set(__self__, "servers_transport", servers_transport)
        if sticky is not None:
            pulumi.set(__self__, "sticky", sticky)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name defines the name of the referenced Kubernetes Service or TraefikService. The differentiation between the two is specified in the Kind field.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind defines the kind of the Service.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="passHostHeader")
    def pass_host_header(self) -> Optional[bool]:
        """
        PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service. By default, passHostHeader is true.
        """
        return pulumi.get(self, "pass_host_header")

    @property
    @pulumi.getter
    def port(self) -> Optional[Any]:
        """
        Port defines the port of a Kubernetes Service. This can be a reference to a named port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="responseForwarding")
    def response_forwarding(self) -> Optional['outputs.MiddlewareSpecErrorsServiceResponseForwarding']:
        """
        ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
        """
        return pulumi.get(self, "response_forwarding")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        """
        Scheme defines the scheme to use for the request to the upstream Kubernetes Service. It defaults to https when Kubernetes Service port is 443, http otherwise.
        """
        return pulumi.get(self, "scheme")

    @property
    @pulumi.getter(name="serversTransport")
    def servers_transport(self) -> Optional[str]:
        """
        ServersTransport defines the name of ServersTransport resource to use. It allows to configure the transport between Traefik and your servers. Can only be used on a Kubernetes Service.
        """
        return pulumi.get(self, "servers_transport")

    @property
    @pulumi.getter
    def sticky(self) -> Optional['outputs.MiddlewareSpecErrorsServiceSticky']:
        """
        Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.8/routing/services/#sticky-sessions
        """
        return pulumi.get(self, "sticky")

    @property
    @pulumi.getter
    def strategy(self) -> Optional[str]:
        """
        Strategy defines the load balancing strategy between the servers. RoundRobin is the only supported value at the moment.
        """
        return pulumi.get(self, "strategy")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        """
        Weight defines the weight and should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class MiddlewareSpecErrorsServiceResponseForwarding(dict):
    """
    ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "flushInterval":
            suggest = "flush_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MiddlewareSpecErrorsServiceResponseForwarding. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MiddlewareSpecErrorsServiceResponseForwarding.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MiddlewareSpecErrorsServiceResponseForwarding.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 flush_interval: Optional[str] = None):
        """
        ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
        :param str flush_interval: FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body. A negative value means to flush immediately after each write to the client. This configuration is ignored when ReverseProxy recognizes a response as a streaming response; for such responses, writes are flushed to the client immediately. Default: 100ms
        """
        if flush_interval is not None:
            pulumi.set(__self__, "flush_interval", flush_interval)

    @property
    @pulumi.getter(name="flushInterval")
    def flush_interval(self) -> Optional[str]:
        """
        FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body. A negative value means to flush immediately after each write to the client. This configuration is ignored when ReverseProxy recognizes a response as a streaming response; for such responses, writes are flushed to the client immediately. Default: 100ms
        """
        return pulumi.get(self, "flush_interval")


@pulumi.output_type
class MiddlewareSpecErrorsServiceSticky(dict):
    """
    Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.8/routing/services/#sticky-sessions
    """
    def __init__(__self__, *,
                 cookie: Optional['outputs.MiddlewareSpecErrorsServiceStickyCookie'] = None):
        """
        Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.8/routing/services/#sticky-sessions
        :param 'MiddlewareSpecErrorsServiceStickyCookieArgs' cookie: Cookie defines the sticky cookie configuration.
        """
        if cookie is not None:
            pulumi.set(__self__, "cookie", cookie)

    @property
    @pulumi.getter
    def cookie(self) -> Optional['outputs.MiddlewareSpecErrorsServiceStickyCookie']:
        """
        Cookie defines the sticky cookie configuration.
        """
        return pulumi.get(self, "cookie")


@pulumi.output_type
class MiddlewareSpecErrorsServiceStickyCookie(dict):
    """
    Cookie defines the sticky cookie configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpOnly":
            suggest = "http_only"
        elif key == "sameSite":
            suggest = "same_site"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MiddlewareSpecErrorsServiceStickyCookie. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MiddlewareSpecErrorsServiceStickyCookie.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MiddlewareSpecErrorsServiceStickyCookie.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http_only: Optional[bool] = None,
                 name: Optional[str] = None,
                 same_site: Optional[str] = None,
                 secure: Optional[bool] = None):
        """
        Cookie defines the sticky cookie configuration.
        :param bool http_only: HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
        :param str name: Name defines the Cookie name.
        :param str same_site: SameSite defines the same site policy. More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
        :param bool secure: Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
        """
        if http_only is not None:
            pulumi.set(__self__, "http_only", http_only)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if same_site is not None:
            pulumi.set(__self__, "same_site", same_site)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)

    @property
    @pulumi.getter(name="httpOnly")
    def http_only(self) -> Optional[bool]:
        """
        HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
        """
        return pulumi.get(self, "http_only")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name defines the Cookie name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sameSite")
    def same_site(self) -> Optional[str]:
        """
        SameSite defines the same site policy. More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
        """
        return pulumi.get(self, "same_site")

    @property
    @pulumi.getter
    def secure(self) -> Optional[bool]:
        """
        Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
        """
        return pulumi.get(self, "secure")


@pulumi.output_type
class MiddlewareSpecForwardAuth(dict):
    """
    ForwardAuth holds the forward auth middleware configuration. This middleware delegates the request authentication to a Service. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/forwardauth/
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authRequestHeaders":
            suggest = "auth_request_headers"
        elif key == "authResponseHeaders":
            suggest = "auth_response_headers"
        elif key == "authResponseHeadersRegex":
            suggest = "auth_response_headers_regex"
        elif key == "trustForwardHeader":
            suggest = "trust_forward_header"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MiddlewareSpecForwardAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MiddlewareSpecForwardAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MiddlewareSpecForwardAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[str] = None,
                 auth_request_headers: Optional[Sequence[str]] = None,
                 auth_response_headers: Optional[Sequence[str]] = None,
                 auth_response_headers_regex: Optional[str] = None,
                 tls: Optional['outputs.MiddlewareSpecForwardAuthTls'] = None,
                 trust_forward_header: Optional[bool] = None):
        """
        ForwardAuth holds the forward auth middleware configuration. This middleware delegates the request authentication to a Service. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/forwardauth/
        :param str address: Address defines the authentication server address.
        :param Sequence[str] auth_request_headers: AuthRequestHeaders defines the list of the headers to copy from the request to the authentication server. If not set or empty then all request headers are passed.
        :param Sequence[str] auth_response_headers: AuthResponseHeaders defines the list of headers to copy from the authentication server response and set on forwarded request, replacing any existing conflicting headers.
        :param str auth_response_headers_regex: AuthResponseHeadersRegex defines the regex to match headers to copy from the authentication server response and set on forwarded request, after stripping all headers that match the regex. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/forwardauth/#authresponseheadersregex
        :param 'MiddlewareSpecForwardAuthTlsArgs' tls: TLS defines the configuration used to secure the connection to the authentication server.
        :param bool trust_forward_header: TrustForwardHeader defines whether to trust (ie: forward) all X-Forwarded-* headers.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if auth_request_headers is not None:
            pulumi.set(__self__, "auth_request_headers", auth_request_headers)
        if auth_response_headers is not None:
            pulumi.set(__self__, "auth_response_headers", auth_response_headers)
        if auth_response_headers_regex is not None:
            pulumi.set(__self__, "auth_response_headers_regex", auth_response_headers_regex)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)
        if trust_forward_header is not None:
            pulumi.set(__self__, "trust_forward_header", trust_forward_header)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        """
        Address defines the authentication server address.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="authRequestHeaders")
    def auth_request_headers(self) -> Optional[Sequence[str]]:
        """
        AuthRequestHeaders defines the list of the headers to copy from the request to the authentication server. If not set or empty then all request headers are passed.
        """
        return pulumi.get(self, "auth_request_headers")

    @property
    @pulumi.getter(name="authResponseHeaders")
    def auth_response_headers(self) -> Optional[Sequence[str]]:
        """
        AuthResponseHeaders defines the list of headers to copy from the authentication server response and set on forwarded request, replacing any existing conflicting headers.
        """
        return pulumi.get(self, "auth_response_headers")

    @property
    @pulumi.getter(name="authResponseHeadersRegex")
    def auth_response_headers_regex(self) -> Optional[str]:
        """
        AuthResponseHeadersRegex defines the regex to match headers to copy from the authentication server response and set on forwarded request, after stripping all headers that match the regex. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/forwardauth/#authresponseheadersregex
        """
        return pulumi.get(self, "auth_response_headers_regex")

    @property
    @pulumi.getter
    def tls(self) -> Optional['outputs.MiddlewareSpecForwardAuthTls']:
        """
        TLS defines the configuration used to secure the connection to the authentication server.
        """
        return pulumi.get(self, "tls")

    @property
    @pulumi.getter(name="trustForwardHeader")
    def trust_forward_header(self) -> Optional[bool]:
        """
        TrustForwardHeader defines whether to trust (ie: forward) all X-Forwarded-* headers.
        """
        return pulumi.get(self, "trust_forward_header")


@pulumi.output_type
class MiddlewareSpecForwardAuthTls(dict):
    """
    TLS defines the configuration used to secure the connection to the authentication server.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caOptional":
            suggest = "ca_optional"
        elif key == "caSecret":
            suggest = "ca_secret"
        elif key == "certSecret":
            suggest = "cert_secret"
        elif key == "insecureSkipVerify":
            suggest = "insecure_skip_verify"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MiddlewareSpecForwardAuthTls. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MiddlewareSpecForwardAuthTls.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MiddlewareSpecForwardAuthTls.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_optional: Optional[bool] = None,
                 ca_secret: Optional[str] = None,
                 cert_secret: Optional[str] = None,
                 insecure_skip_verify: Optional[bool] = None):
        """
        TLS defines the configuration used to secure the connection to the authentication server.
        :param str ca_secret: CASecret is the name of the referenced Kubernetes Secret containing the CA to validate the server certificate. The CA certificate is extracted from key `tls.ca` or `ca.crt`.
        :param str cert_secret: CertSecret is the name of the referenced Kubernetes Secret containing the client certificate. The client certificate is extracted from the keys `tls.crt` and `tls.key`.
        :param bool insecure_skip_verify: InsecureSkipVerify defines whether the server certificates should be validated.
        """
        if ca_optional is not None:
            pulumi.set(__self__, "ca_optional", ca_optional)
        if ca_secret is not None:
            pulumi.set(__self__, "ca_secret", ca_secret)
        if cert_secret is not None:
            pulumi.set(__self__, "cert_secret", cert_secret)
        if insecure_skip_verify is not None:
            pulumi.set(__self__, "insecure_skip_verify", insecure_skip_verify)

    @property
    @pulumi.getter(name="caOptional")
    def ca_optional(self) -> Optional[bool]:
        return pulumi.get(self, "ca_optional")

    @property
    @pulumi.getter(name="caSecret")
    def ca_secret(self) -> Optional[str]:
        """
        CASecret is the name of the referenced Kubernetes Secret containing the CA to validate the server certificate. The CA certificate is extracted from key `tls.ca` or `ca.crt`.
        """
        return pulumi.get(self, "ca_secret")

    @property
    @pulumi.getter(name="certSecret")
    def cert_secret(self) -> Optional[str]:
        """
        CertSecret is the name of the referenced Kubernetes Secret containing the client certificate. The client certificate is extracted from the keys `tls.crt` and `tls.key`.
        """
        return pulumi.get(self, "cert_secret")

    @property
    @pulumi.getter(name="insecureSkipVerify")
    def insecure_skip_verify(self) -> Optional[bool]:
        """
        InsecureSkipVerify defines whether the server certificates should be validated.
        """
        return pulumi.get(self, "insecure_skip_verify")


@pulumi.output_type
class MiddlewareSpecHeaders(dict):
    """
    Headers holds the headers middleware configuration. This middleware manages the requests and responses headers. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/headers/#customrequestheaders
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessControlAllowCredentials":
            suggest = "access_control_allow_credentials"
        elif key == "accessControlAllowHeaders":
            suggest = "access_control_allow_headers"
        elif key == "accessControlAllowMethods":
            suggest = "access_control_allow_methods"
        elif key == "accessControlAllowOriginList":
            suggest = "access_control_allow_origin_list"
        elif key == "accessControlAllowOriginListRegex":
            suggest = "access_control_allow_origin_list_regex"
        elif key == "accessControlExposeHeaders":
            suggest = "access_control_expose_headers"
        elif key == "accessControlMaxAge":
            suggest = "access_control_max_age"
        elif key == "addVaryHeader":
            suggest = "add_vary_header"
        elif key == "allowedHosts":
            suggest = "allowed_hosts"
        elif key == "browserXssFilter":
            suggest = "browser_xss_filter"
        elif key == "contentSecurityPolicy":
            suggest = "content_security_policy"
        elif key == "contentTypeNosniff":
            suggest = "content_type_nosniff"
        elif key == "customBrowserXSSValue":
            suggest = "custom_browser_xss_value"
        elif key == "customFrameOptionsValue":
            suggest = "custom_frame_options_value"
        elif key == "customRequestHeaders":
            suggest = "custom_request_headers"
        elif key == "customResponseHeaders":
            suggest = "custom_response_headers"
        elif key == "featurePolicy":
            suggest = "feature_policy"
        elif key == "forceSTSHeader":
            suggest = "force_sts_header"
        elif key == "frameDeny":
            suggest = "frame_deny"
        elif key == "hostsProxyHeaders":
            suggest = "hosts_proxy_headers"
        elif key == "isDevelopment":
            suggest = "is_development"
        elif key == "permissionsPolicy":
            suggest = "permissions_policy"
        elif key == "publicKey":
            suggest = "public_key"
        elif key == "referrerPolicy":
            suggest = "referrer_policy"
        elif key == "sslForceHost":
            suggest = "ssl_force_host"
        elif key == "sslHost":
            suggest = "ssl_host"
        elif key == "sslProxyHeaders":
            suggest = "ssl_proxy_headers"
        elif key == "sslRedirect":
            suggest = "ssl_redirect"
        elif key == "sslTemporaryRedirect":
            suggest = "ssl_temporary_redirect"
        elif key == "stsIncludeSubdomains":
            suggest = "sts_include_subdomains"
        elif key == "stsPreload":
            suggest = "sts_preload"
        elif key == "stsSeconds":
            suggest = "sts_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MiddlewareSpecHeaders. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MiddlewareSpecHeaders.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MiddlewareSpecHeaders.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_control_allow_credentials: Optional[bool] = None,
                 access_control_allow_headers: Optional[Sequence[str]] = None,
                 access_control_allow_methods: Optional[Sequence[str]] = None,
                 access_control_allow_origin_list: Optional[Sequence[str]] = None,
                 access_control_allow_origin_list_regex: Optional[Sequence[str]] = None,
                 access_control_expose_headers: Optional[Sequence[str]] = None,
                 access_control_max_age: Optional[int] = None,
                 add_vary_header: Optional[bool] = None,
                 allowed_hosts: Optional[Sequence[str]] = None,
                 browser_xss_filter: Optional[bool] = None,
                 content_security_policy: Optional[str] = None,
                 content_type_nosniff: Optional[bool] = None,
                 custom_browser_xss_value: Optional[str] = None,
                 custom_frame_options_value: Optional[str] = None,
                 custom_request_headers: Optional[Mapping[str, str]] = None,
                 custom_response_headers: Optional[Mapping[str, str]] = None,
                 feature_policy: Optional[str] = None,
                 force_sts_header: Optional[bool] = None,
                 frame_deny: Optional[bool] = None,
                 hosts_proxy_headers: Optional[Sequence[str]] = None,
                 is_development: Optional[bool] = None,
                 permissions_policy: Optional[str] = None,
                 public_key: Optional[str] = None,
                 referrer_policy: Optional[str] = None,
                 ssl_force_host: Optional[bool] = None,
                 ssl_host: Optional[str] = None,
                 ssl_proxy_headers: Optional[Mapping[str, str]] = None,
                 ssl_redirect: Optional[bool] = None,
                 ssl_temporary_redirect: Optional[bool] = None,
                 sts_include_subdomains: Optional[bool] = None,
                 sts_preload: Optional[bool] = None,
                 sts_seconds: Optional[int] = None):
        """
        Headers holds the headers middleware configuration. This middleware manages the requests and responses headers. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/headers/#customrequestheaders
        :param bool access_control_allow_credentials: AccessControlAllowCredentials defines whether the request can include user credentials.
        :param Sequence[str] access_control_allow_headers: AccessControlAllowHeaders defines the Access-Control-Request-Headers values sent in preflight response.
        :param Sequence[str] access_control_allow_methods: AccessControlAllowMethods defines the Access-Control-Request-Method values sent in preflight response.
        :param Sequence[str] access_control_allow_origin_list: AccessControlAllowOriginList is a list of allowable origins. Can also be a wildcard origin "*".
        :param Sequence[str] access_control_allow_origin_list_regex: AccessControlAllowOriginListRegex is a list of allowable origins written following the Regular Expression syntax (https://golang.org/pkg/regexp/).
        :param Sequence[str] access_control_expose_headers: AccessControlExposeHeaders defines the Access-Control-Expose-Headers values sent in preflight response.
        :param int access_control_max_age: AccessControlMaxAge defines the time that a preflight request may be cached.
        :param bool add_vary_header: AddVaryHeader defines whether the Vary header is automatically added/updated when the AccessControlAllowOriginList is set.
        :param Sequence[str] allowed_hosts: AllowedHosts defines the fully qualified list of allowed domain names.
        :param bool browser_xss_filter: BrowserXSSFilter defines whether to add the X-XSS-Protection header with the value 1; mode=block.
        :param str content_security_policy: ContentSecurityPolicy defines the Content-Security-Policy header value.
        :param bool content_type_nosniff: ContentTypeNosniff defines whether to add the X-Content-Type-Options header with the nosniff value.
        :param str custom_browser_xss_value: CustomBrowserXSSValue defines the X-XSS-Protection header value. This overrides the BrowserXssFilter option.
        :param str custom_frame_options_value: CustomFrameOptionsValue defines the X-Frame-Options header value. This overrides the FrameDeny option.
        :param Mapping[str, str] custom_request_headers: CustomRequestHeaders defines the header names and values to apply to the request.
        :param Mapping[str, str] custom_response_headers: CustomResponseHeaders defines the header names and values to apply to the response.
        :param str feature_policy: Deprecated: use PermissionsPolicy instead.
        :param bool force_sts_header: ForceSTSHeader defines whether to add the STS header even when the connection is HTTP.
        :param bool frame_deny: FrameDeny defines whether to add the X-Frame-Options header with the DENY value.
        :param Sequence[str] hosts_proxy_headers: HostsProxyHeaders defines the header keys that may hold a proxied hostname value for the request.
        :param bool is_development: IsDevelopment defines whether to mitigate the unwanted effects of the AllowedHosts, SSL, and STS options when developing. Usually testing takes place using HTTP, not HTTPS, and on localhost, not your production domain. If you would like your development environment to mimic production with complete Host blocking, SSL redirects, and STS headers, leave this as false.
        :param str permissions_policy: PermissionsPolicy defines the Permissions-Policy header value. This allows sites to control browser features.
        :param str public_key: PublicKey is the public key that implements HPKP to prevent MITM attacks with forged certificates.
        :param str referrer_policy: ReferrerPolicy defines the Referrer-Policy header value. This allows sites to control whether browsers forward the Referer header to other sites.
        :param bool ssl_force_host: Deprecated: use RedirectRegex instead.
        :param str ssl_host: Deprecated: use RedirectRegex instead.
        :param Mapping[str, str] ssl_proxy_headers: SSLProxyHeaders defines the header keys with associated values that would indicate a valid HTTPS request. It can be useful when using other proxies (example: "X-Forwarded-Proto": "https").
        :param bool ssl_redirect: Deprecated: use EntryPoint redirection or RedirectScheme instead.
        :param bool ssl_temporary_redirect: Deprecated: use EntryPoint redirection or RedirectScheme instead.
        :param bool sts_include_subdomains: STSIncludeSubdomains defines whether the includeSubDomains directive is appended to the Strict-Transport-Security header.
        :param bool sts_preload: STSPreload defines whether the preload flag is appended to the Strict-Transport-Security header.
        :param int sts_seconds: STSSeconds defines the max-age of the Strict-Transport-Security header. If set to 0, the header is not set.
        """
        if access_control_allow_credentials is not None:
            pulumi.set(__self__, "access_control_allow_credentials", access_control_allow_credentials)
        if access_control_allow_headers is not None:
            pulumi.set(__self__, "access_control_allow_headers", access_control_allow_headers)
        if access_control_allow_methods is not None:
            pulumi.set(__self__, "access_control_allow_methods", access_control_allow_methods)
        if access_control_allow_origin_list is not None:
            pulumi.set(__self__, "access_control_allow_origin_list", access_control_allow_origin_list)
        if access_control_allow_origin_list_regex is not None:
            pulumi.set(__self__, "access_control_allow_origin_list_regex", access_control_allow_origin_list_regex)
        if access_control_expose_headers is not None:
            pulumi.set(__self__, "access_control_expose_headers", access_control_expose_headers)
        if access_control_max_age is not None:
            pulumi.set(__self__, "access_control_max_age", access_control_max_age)
        if add_vary_header is not None:
            pulumi.set(__self__, "add_vary_header", add_vary_header)
        if allowed_hosts is not None:
            pulumi.set(__self__, "allowed_hosts", allowed_hosts)
        if browser_xss_filter is not None:
            pulumi.set(__self__, "browser_xss_filter", browser_xss_filter)
        if content_security_policy is not None:
            pulumi.set(__self__, "content_security_policy", content_security_policy)
        if content_type_nosniff is not None:
            pulumi.set(__self__, "content_type_nosniff", content_type_nosniff)
        if custom_browser_xss_value is not None:
            pulumi.set(__self__, "custom_browser_xss_value", custom_browser_xss_value)
        if custom_frame_options_value is not None:
            pulumi.set(__self__, "custom_frame_options_value", custom_frame_options_value)
        if custom_request_headers is not None:
            pulumi.set(__self__, "custom_request_headers", custom_request_headers)
        if custom_response_headers is not None:
            pulumi.set(__self__, "custom_response_headers", custom_response_headers)
        if feature_policy is not None:
            pulumi.set(__self__, "feature_policy", feature_policy)
        if force_sts_header is not None:
            pulumi.set(__self__, "force_sts_header", force_sts_header)
        if frame_deny is not None:
            pulumi.set(__self__, "frame_deny", frame_deny)
        if hosts_proxy_headers is not None:
            pulumi.set(__self__, "hosts_proxy_headers", hosts_proxy_headers)
        if is_development is not None:
            pulumi.set(__self__, "is_development", is_development)
        if permissions_policy is not None:
            pulumi.set(__self__, "permissions_policy", permissions_policy)
        if public_key is not None:
            pulumi.set(__self__, "public_key", public_key)
        if referrer_policy is not None:
            pulumi.set(__self__, "referrer_policy", referrer_policy)
        if ssl_force_host is not None:
            pulumi.set(__self__, "ssl_force_host", ssl_force_host)
        if ssl_host is not None:
            pulumi.set(__self__, "ssl_host", ssl_host)
        if ssl_proxy_headers is not None:
            pulumi.set(__self__, "ssl_proxy_headers", ssl_proxy_headers)
        if ssl_redirect is not None:
            pulumi.set(__self__, "ssl_redirect", ssl_redirect)
        if ssl_temporary_redirect is not None:
            pulumi.set(__self__, "ssl_temporary_redirect", ssl_temporary_redirect)
        if sts_include_subdomains is not None:
            pulumi.set(__self__, "sts_include_subdomains", sts_include_subdomains)
        if sts_preload is not None:
            pulumi.set(__self__, "sts_preload", sts_preload)
        if sts_seconds is not None:
            pulumi.set(__self__, "sts_seconds", sts_seconds)

    @property
    @pulumi.getter(name="accessControlAllowCredentials")
    def access_control_allow_credentials(self) -> Optional[bool]:
        """
        AccessControlAllowCredentials defines whether the request can include user credentials.
        """
        return pulumi.get(self, "access_control_allow_credentials")

    @property
    @pulumi.getter(name="accessControlAllowHeaders")
    def access_control_allow_headers(self) -> Optional[Sequence[str]]:
        """
        AccessControlAllowHeaders defines the Access-Control-Request-Headers values sent in preflight response.
        """
        return pulumi.get(self, "access_control_allow_headers")

    @property
    @pulumi.getter(name="accessControlAllowMethods")
    def access_control_allow_methods(self) -> Optional[Sequence[str]]:
        """
        AccessControlAllowMethods defines the Access-Control-Request-Method values sent in preflight response.
        """
        return pulumi.get(self, "access_control_allow_methods")

    @property
    @pulumi.getter(name="accessControlAllowOriginList")
    def access_control_allow_origin_list(self) -> Optional[Sequence[str]]:
        """
        AccessControlAllowOriginList is a list of allowable origins. Can also be a wildcard origin "*".
        """
        return pulumi.get(self, "access_control_allow_origin_list")

    @property
    @pulumi.getter(name="accessControlAllowOriginListRegex")
    def access_control_allow_origin_list_regex(self) -> Optional[Sequence[str]]:
        """
        AccessControlAllowOriginListRegex is a list of allowable origins written following the Regular Expression syntax (https://golang.org/pkg/regexp/).
        """
        return pulumi.get(self, "access_control_allow_origin_list_regex")

    @property
    @pulumi.getter(name="accessControlExposeHeaders")
    def access_control_expose_headers(self) -> Optional[Sequence[str]]:
        """
        AccessControlExposeHeaders defines the Access-Control-Expose-Headers values sent in preflight response.
        """
        return pulumi.get(self, "access_control_expose_headers")

    @property
    @pulumi.getter(name="accessControlMaxAge")
    def access_control_max_age(self) -> Optional[int]:
        """
        AccessControlMaxAge defines the time that a preflight request may be cached.
        """
        return pulumi.get(self, "access_control_max_age")

    @property
    @pulumi.getter(name="addVaryHeader")
    def add_vary_header(self) -> Optional[bool]:
        """
        AddVaryHeader defines whether the Vary header is automatically added/updated when the AccessControlAllowOriginList is set.
        """
        return pulumi.get(self, "add_vary_header")

    @property
    @pulumi.getter(name="allowedHosts")
    def allowed_hosts(self) -> Optional[Sequence[str]]:
        """
        AllowedHosts defines the fully qualified list of allowed domain names.
        """
        return pulumi.get(self, "allowed_hosts")

    @property
    @pulumi.getter(name="browserXssFilter")
    def browser_xss_filter(self) -> Optional[bool]:
        """
        BrowserXSSFilter defines whether to add the X-XSS-Protection header with the value 1; mode=block.
        """
        return pulumi.get(self, "browser_xss_filter")

    @property
    @pulumi.getter(name="contentSecurityPolicy")
    def content_security_policy(self) -> Optional[str]:
        """
        ContentSecurityPolicy defines the Content-Security-Policy header value.
        """
        return pulumi.get(self, "content_security_policy")

    @property
    @pulumi.getter(name="contentTypeNosniff")
    def content_type_nosniff(self) -> Optional[bool]:
        """
        ContentTypeNosniff defines whether to add the X-Content-Type-Options header with the nosniff value.
        """
        return pulumi.get(self, "content_type_nosniff")

    @property
    @pulumi.getter(name="customBrowserXSSValue")
    def custom_browser_xss_value(self) -> Optional[str]:
        """
        CustomBrowserXSSValue defines the X-XSS-Protection header value. This overrides the BrowserXssFilter option.
        """
        return pulumi.get(self, "custom_browser_xss_value")

    @property
    @pulumi.getter(name="customFrameOptionsValue")
    def custom_frame_options_value(self) -> Optional[str]:
        """
        CustomFrameOptionsValue defines the X-Frame-Options header value. This overrides the FrameDeny option.
        """
        return pulumi.get(self, "custom_frame_options_value")

    @property
    @pulumi.getter(name="customRequestHeaders")
    def custom_request_headers(self) -> Optional[Mapping[str, str]]:
        """
        CustomRequestHeaders defines the header names and values to apply to the request.
        """
        return pulumi.get(self, "custom_request_headers")

    @property
    @pulumi.getter(name="customResponseHeaders")
    def custom_response_headers(self) -> Optional[Mapping[str, str]]:
        """
        CustomResponseHeaders defines the header names and values to apply to the response.
        """
        return pulumi.get(self, "custom_response_headers")

    @property
    @pulumi.getter(name="featurePolicy")
    def feature_policy(self) -> Optional[str]:
        """
        Deprecated: use PermissionsPolicy instead.
        """
        return pulumi.get(self, "feature_policy")

    @property
    @pulumi.getter(name="forceSTSHeader")
    def force_sts_header(self) -> Optional[bool]:
        """
        ForceSTSHeader defines whether to add the STS header even when the connection is HTTP.
        """
        return pulumi.get(self, "force_sts_header")

    @property
    @pulumi.getter(name="frameDeny")
    def frame_deny(self) -> Optional[bool]:
        """
        FrameDeny defines whether to add the X-Frame-Options header with the DENY value.
        """
        return pulumi.get(self, "frame_deny")

    @property
    @pulumi.getter(name="hostsProxyHeaders")
    def hosts_proxy_headers(self) -> Optional[Sequence[str]]:
        """
        HostsProxyHeaders defines the header keys that may hold a proxied hostname value for the request.
        """
        return pulumi.get(self, "hosts_proxy_headers")

    @property
    @pulumi.getter(name="isDevelopment")
    def is_development(self) -> Optional[bool]:
        """
        IsDevelopment defines whether to mitigate the unwanted effects of the AllowedHosts, SSL, and STS options when developing. Usually testing takes place using HTTP, not HTTPS, and on localhost, not your production domain. If you would like your development environment to mimic production with complete Host blocking, SSL redirects, and STS headers, leave this as false.
        """
        return pulumi.get(self, "is_development")

    @property
    @pulumi.getter(name="permissionsPolicy")
    def permissions_policy(self) -> Optional[str]:
        """
        PermissionsPolicy defines the Permissions-Policy header value. This allows sites to control browser features.
        """
        return pulumi.get(self, "permissions_policy")

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[str]:
        """
        PublicKey is the public key that implements HPKP to prevent MITM attacks with forged certificates.
        """
        return pulumi.get(self, "public_key")

    @property
    @pulumi.getter(name="referrerPolicy")
    def referrer_policy(self) -> Optional[str]:
        """
        ReferrerPolicy defines the Referrer-Policy header value. This allows sites to control whether browsers forward the Referer header to other sites.
        """
        return pulumi.get(self, "referrer_policy")

    @property
    @pulumi.getter(name="sslForceHost")
    def ssl_force_host(self) -> Optional[bool]:
        """
        Deprecated: use RedirectRegex instead.
        """
        return pulumi.get(self, "ssl_force_host")

    @property
    @pulumi.getter(name="sslHost")
    def ssl_host(self) -> Optional[str]:
        """
        Deprecated: use RedirectRegex instead.
        """
        return pulumi.get(self, "ssl_host")

    @property
    @pulumi.getter(name="sslProxyHeaders")
    def ssl_proxy_headers(self) -> Optional[Mapping[str, str]]:
        """
        SSLProxyHeaders defines the header keys with associated values that would indicate a valid HTTPS request. It can be useful when using other proxies (example: "X-Forwarded-Proto": "https").
        """
        return pulumi.get(self, "ssl_proxy_headers")

    @property
    @pulumi.getter(name="sslRedirect")
    def ssl_redirect(self) -> Optional[bool]:
        """
        Deprecated: use EntryPoint redirection or RedirectScheme instead.
        """
        return pulumi.get(self, "ssl_redirect")

    @property
    @pulumi.getter(name="sslTemporaryRedirect")
    def ssl_temporary_redirect(self) -> Optional[bool]:
        """
        Deprecated: use EntryPoint redirection or RedirectScheme instead.
        """
        return pulumi.get(self, "ssl_temporary_redirect")

    @property
    @pulumi.getter(name="stsIncludeSubdomains")
    def sts_include_subdomains(self) -> Optional[bool]:
        """
        STSIncludeSubdomains defines whether the includeSubDomains directive is appended to the Strict-Transport-Security header.
        """
        return pulumi.get(self, "sts_include_subdomains")

    @property
    @pulumi.getter(name="stsPreload")
    def sts_preload(self) -> Optional[bool]:
        """
        STSPreload defines whether the preload flag is appended to the Strict-Transport-Security header.
        """
        return pulumi.get(self, "sts_preload")

    @property
    @pulumi.getter(name="stsSeconds")
    def sts_seconds(self) -> Optional[int]:
        """
        STSSeconds defines the max-age of the Strict-Transport-Security header. If set to 0, the header is not set.
        """
        return pulumi.get(self, "sts_seconds")


@pulumi.output_type
class MiddlewareSpecInFlightReq(dict):
    """
    InFlightReq holds the in-flight request middleware configuration. This middleware limits the number of requests being processed and served concurrently. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/inflightreq/
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceCriterion":
            suggest = "source_criterion"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MiddlewareSpecInFlightReq. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MiddlewareSpecInFlightReq.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MiddlewareSpecInFlightReq.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 amount: Optional[int] = None,
                 source_criterion: Optional['outputs.MiddlewareSpecInFlightReqSourceCriterion'] = None):
        """
        InFlightReq holds the in-flight request middleware configuration. This middleware limits the number of requests being processed and served concurrently. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/inflightreq/
        :param int amount: Amount defines the maximum amount of allowed simultaneous in-flight request. The middleware responds with HTTP 429 Too Many Requests if there are already amount requests in progress (based on the same sourceCriterion strategy).
        :param 'MiddlewareSpecInFlightReqSourceCriterionArgs' source_criterion: SourceCriterion defines what criterion is used to group requests as originating from a common source. If several strategies are defined at the same time, an error will be raised. If none are set, the default is to use the requestHost. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/inflightreq/#sourcecriterion
        """
        if amount is not None:
            pulumi.set(__self__, "amount", amount)
        if source_criterion is not None:
            pulumi.set(__self__, "source_criterion", source_criterion)

    @property
    @pulumi.getter
    def amount(self) -> Optional[int]:
        """
        Amount defines the maximum amount of allowed simultaneous in-flight request. The middleware responds with HTTP 429 Too Many Requests if there are already amount requests in progress (based on the same sourceCriterion strategy).
        """
        return pulumi.get(self, "amount")

    @property
    @pulumi.getter(name="sourceCriterion")
    def source_criterion(self) -> Optional['outputs.MiddlewareSpecInFlightReqSourceCriterion']:
        """
        SourceCriterion defines what criterion is used to group requests as originating from a common source. If several strategies are defined at the same time, an error will be raised. If none are set, the default is to use the requestHost. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/inflightreq/#sourcecriterion
        """
        return pulumi.get(self, "source_criterion")


@pulumi.output_type
class MiddlewareSpecInFlightReqSourceCriterion(dict):
    """
    SourceCriterion defines what criterion is used to group requests as originating from a common source. If several strategies are defined at the same time, an error will be raised. If none are set, the default is to use the requestHost. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/inflightreq/#sourcecriterion
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipStrategy":
            suggest = "ip_strategy"
        elif key == "requestHeaderName":
            suggest = "request_header_name"
        elif key == "requestHost":
            suggest = "request_host"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MiddlewareSpecInFlightReqSourceCriterion. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MiddlewareSpecInFlightReqSourceCriterion.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MiddlewareSpecInFlightReqSourceCriterion.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_strategy: Optional['outputs.MiddlewareSpecInFlightReqSourceCriterionIpStrategy'] = None,
                 request_header_name: Optional[str] = None,
                 request_host: Optional[bool] = None):
        """
        SourceCriterion defines what criterion is used to group requests as originating from a common source. If several strategies are defined at the same time, an error will be raised. If none are set, the default is to use the requestHost. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/inflightreq/#sourcecriterion
        :param 'MiddlewareSpecInFlightReqSourceCriterionIpStrategyArgs' ip_strategy: IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/ipwhitelist/#ipstrategy
        :param str request_header_name: RequestHeaderName defines the name of the header used to group incoming requests.
        :param bool request_host: RequestHost defines whether to consider the request Host as the source.
        """
        if ip_strategy is not None:
            pulumi.set(__self__, "ip_strategy", ip_strategy)
        if request_header_name is not None:
            pulumi.set(__self__, "request_header_name", request_header_name)
        if request_host is not None:
            pulumi.set(__self__, "request_host", request_host)

    @property
    @pulumi.getter(name="ipStrategy")
    def ip_strategy(self) -> Optional['outputs.MiddlewareSpecInFlightReqSourceCriterionIpStrategy']:
        """
        IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/ipwhitelist/#ipstrategy
        """
        return pulumi.get(self, "ip_strategy")

    @property
    @pulumi.getter(name="requestHeaderName")
    def request_header_name(self) -> Optional[str]:
        """
        RequestHeaderName defines the name of the header used to group incoming requests.
        """
        return pulumi.get(self, "request_header_name")

    @property
    @pulumi.getter(name="requestHost")
    def request_host(self) -> Optional[bool]:
        """
        RequestHost defines whether to consider the request Host as the source.
        """
        return pulumi.get(self, "request_host")


@pulumi.output_type
class MiddlewareSpecInFlightReqSourceCriterionIpStrategy(dict):
    """
    IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/ipwhitelist/#ipstrategy
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "excludedIPs":
            suggest = "excluded_ips"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MiddlewareSpecInFlightReqSourceCriterionIpStrategy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MiddlewareSpecInFlightReqSourceCriterionIpStrategy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MiddlewareSpecInFlightReqSourceCriterionIpStrategy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 depth: Optional[int] = None,
                 excluded_ips: Optional[Sequence[str]] = None):
        """
        IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/ipwhitelist/#ipstrategy
        :param int depth: Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).
        :param Sequence[str] excluded_ips: ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.
        """
        if depth is not None:
            pulumi.set(__self__, "depth", depth)
        if excluded_ips is not None:
            pulumi.set(__self__, "excluded_ips", excluded_ips)

    @property
    @pulumi.getter
    def depth(self) -> Optional[int]:
        """
        Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).
        """
        return pulumi.get(self, "depth")

    @property
    @pulumi.getter(name="excludedIPs")
    def excluded_ips(self) -> Optional[Sequence[str]]:
        """
        ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.
        """
        return pulumi.get(self, "excluded_ips")


@pulumi.output_type
class MiddlewareSpecIpWhiteList(dict):
    """
    IPWhiteList holds the IP whitelist middleware configuration. This middleware accepts / refuses requests based on the client IP. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/ipwhitelist/
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipStrategy":
            suggest = "ip_strategy"
        elif key == "sourceRange":
            suggest = "source_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MiddlewareSpecIpWhiteList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MiddlewareSpecIpWhiteList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MiddlewareSpecIpWhiteList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_strategy: Optional['outputs.MiddlewareSpecIpWhiteListIpStrategy'] = None,
                 source_range: Optional[Sequence[str]] = None):
        """
        IPWhiteList holds the IP whitelist middleware configuration. This middleware accepts / refuses requests based on the client IP. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/ipwhitelist/
        :param 'MiddlewareSpecIpWhiteListIpStrategyArgs' ip_strategy: IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/ipwhitelist/#ipstrategy
        :param Sequence[str] source_range: SourceRange defines the set of allowed IPs (or ranges of allowed IPs by using CIDR notation).
        """
        if ip_strategy is not None:
            pulumi.set(__self__, "ip_strategy", ip_strategy)
        if source_range is not None:
            pulumi.set(__self__, "source_range", source_range)

    @property
    @pulumi.getter(name="ipStrategy")
    def ip_strategy(self) -> Optional['outputs.MiddlewareSpecIpWhiteListIpStrategy']:
        """
        IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/ipwhitelist/#ipstrategy
        """
        return pulumi.get(self, "ip_strategy")

    @property
    @pulumi.getter(name="sourceRange")
    def source_range(self) -> Optional[Sequence[str]]:
        """
        SourceRange defines the set of allowed IPs (or ranges of allowed IPs by using CIDR notation).
        """
        return pulumi.get(self, "source_range")


@pulumi.output_type
class MiddlewareSpecIpWhiteListIpStrategy(dict):
    """
    IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/ipwhitelist/#ipstrategy
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "excludedIPs":
            suggest = "excluded_ips"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MiddlewareSpecIpWhiteListIpStrategy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MiddlewareSpecIpWhiteListIpStrategy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MiddlewareSpecIpWhiteListIpStrategy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 depth: Optional[int] = None,
                 excluded_ips: Optional[Sequence[str]] = None):
        """
        IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/ipwhitelist/#ipstrategy
        :param int depth: Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).
        :param Sequence[str] excluded_ips: ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.
        """
        if depth is not None:
            pulumi.set(__self__, "depth", depth)
        if excluded_ips is not None:
            pulumi.set(__self__, "excluded_ips", excluded_ips)

    @property
    @pulumi.getter
    def depth(self) -> Optional[int]:
        """
        Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).
        """
        return pulumi.get(self, "depth")

    @property
    @pulumi.getter(name="excludedIPs")
    def excluded_ips(self) -> Optional[Sequence[str]]:
        """
        ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.
        """
        return pulumi.get(self, "excluded_ips")


@pulumi.output_type
class MiddlewareSpecPassTLSClientCert(dict):
    """
    PassTLSClientCert holds the pass TLS client cert middleware configuration. This middleware adds the selected data from the passed client TLS certificate to a header. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/passtlsclientcert/
    """
    def __init__(__self__, *,
                 info: Optional['outputs.MiddlewareSpecPassTLSClientCertInfo'] = None,
                 pem: Optional[bool] = None):
        """
        PassTLSClientCert holds the pass TLS client cert middleware configuration. This middleware adds the selected data from the passed client TLS certificate to a header. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/passtlsclientcert/
        :param 'MiddlewareSpecPassTLSClientCertInfoArgs' info: Info selects the specific client certificate details you want to add to the X-Forwarded-Tls-Client-Cert-Info header.
        :param bool pem: PEM sets the X-Forwarded-Tls-Client-Cert header with the escaped certificate.
        """
        if info is not None:
            pulumi.set(__self__, "info", info)
        if pem is not None:
            pulumi.set(__self__, "pem", pem)

    @property
    @pulumi.getter
    def info(self) -> Optional['outputs.MiddlewareSpecPassTLSClientCertInfo']:
        """
        Info selects the specific client certificate details you want to add to the X-Forwarded-Tls-Client-Cert-Info header.
        """
        return pulumi.get(self, "info")

    @property
    @pulumi.getter
    def pem(self) -> Optional[bool]:
        """
        PEM sets the X-Forwarded-Tls-Client-Cert header with the escaped certificate.
        """
        return pulumi.get(self, "pem")


@pulumi.output_type
class MiddlewareSpecPassTLSClientCertInfo(dict):
    """
    Info selects the specific client certificate details you want to add to the X-Forwarded-Tls-Client-Cert-Info header.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notAfter":
            suggest = "not_after"
        elif key == "notBefore":
            suggest = "not_before"
        elif key == "serialNumber":
            suggest = "serial_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MiddlewareSpecPassTLSClientCertInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MiddlewareSpecPassTLSClientCertInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MiddlewareSpecPassTLSClientCertInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 issuer: Optional['outputs.MiddlewareSpecPassTLSClientCertInfoIssuer'] = None,
                 not_after: Optional[bool] = None,
                 not_before: Optional[bool] = None,
                 sans: Optional[bool] = None,
                 serial_number: Optional[bool] = None,
                 subject: Optional['outputs.MiddlewareSpecPassTLSClientCertInfoSubject'] = None):
        """
        Info selects the specific client certificate details you want to add to the X-Forwarded-Tls-Client-Cert-Info header.
        :param 'MiddlewareSpecPassTLSClientCertInfoIssuerArgs' issuer: Issuer defines the client certificate issuer details to add to the X-Forwarded-Tls-Client-Cert-Info header.
        :param bool not_after: NotAfter defines whether to add the Not After information from the Validity part.
        :param bool not_before: NotBefore defines whether to add the Not Before information from the Validity part.
        :param bool sans: Sans defines whether to add the Subject Alternative Name information from the Subject Alternative Name part.
        :param bool serial_number: SerialNumber defines whether to add the client serialNumber information.
        :param 'MiddlewareSpecPassTLSClientCertInfoSubjectArgs' subject: Subject defines the client certificate subject details to add to the X-Forwarded-Tls-Client-Cert-Info header.
        """
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)
        if not_after is not None:
            pulumi.set(__self__, "not_after", not_after)
        if not_before is not None:
            pulumi.set(__self__, "not_before", not_before)
        if sans is not None:
            pulumi.set(__self__, "sans", sans)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if subject is not None:
            pulumi.set(__self__, "subject", subject)

    @property
    @pulumi.getter
    def issuer(self) -> Optional['outputs.MiddlewareSpecPassTLSClientCertInfoIssuer']:
        """
        Issuer defines the client certificate issuer details to add to the X-Forwarded-Tls-Client-Cert-Info header.
        """
        return pulumi.get(self, "issuer")

    @property
    @pulumi.getter(name="notAfter")
    def not_after(self) -> Optional[bool]:
        """
        NotAfter defines whether to add the Not After information from the Validity part.
        """
        return pulumi.get(self, "not_after")

    @property
    @pulumi.getter(name="notBefore")
    def not_before(self) -> Optional[bool]:
        """
        NotBefore defines whether to add the Not Before information from the Validity part.
        """
        return pulumi.get(self, "not_before")

    @property
    @pulumi.getter
    def sans(self) -> Optional[bool]:
        """
        Sans defines whether to add the Subject Alternative Name information from the Subject Alternative Name part.
        """
        return pulumi.get(self, "sans")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[bool]:
        """
        SerialNumber defines whether to add the client serialNumber information.
        """
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter
    def subject(self) -> Optional['outputs.MiddlewareSpecPassTLSClientCertInfoSubject']:
        """
        Subject defines the client certificate subject details to add to the X-Forwarded-Tls-Client-Cert-Info header.
        """
        return pulumi.get(self, "subject")


@pulumi.output_type
class MiddlewareSpecPassTLSClientCertInfoIssuer(dict):
    """
    Issuer defines the client certificate issuer details to add to the X-Forwarded-Tls-Client-Cert-Info header.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonName":
            suggest = "common_name"
        elif key == "domainComponent":
            suggest = "domain_component"
        elif key == "serialNumber":
            suggest = "serial_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MiddlewareSpecPassTLSClientCertInfoIssuer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MiddlewareSpecPassTLSClientCertInfoIssuer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MiddlewareSpecPassTLSClientCertInfoIssuer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_name: Optional[bool] = None,
                 country: Optional[bool] = None,
                 domain_component: Optional[bool] = None,
                 locality: Optional[bool] = None,
                 organization: Optional[bool] = None,
                 province: Optional[bool] = None,
                 serial_number: Optional[bool] = None):
        """
        Issuer defines the client certificate issuer details to add to the X-Forwarded-Tls-Client-Cert-Info header.
        :param bool common_name: CommonName defines whether to add the organizationalUnit information into the issuer.
        :param bool country: Country defines whether to add the country information into the issuer.
        :param bool domain_component: DomainComponent defines whether to add the domainComponent information into the issuer.
        :param bool locality: Locality defines whether to add the locality information into the issuer.
        :param bool organization: Organization defines whether to add the organization information into the issuer.
        :param bool province: Province defines whether to add the province information into the issuer.
        :param bool serial_number: SerialNumber defines whether to add the serialNumber information into the issuer.
        """
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if domain_component is not None:
            pulumi.set(__self__, "domain_component", domain_component)
        if locality is not None:
            pulumi.set(__self__, "locality", locality)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if province is not None:
            pulumi.set(__self__, "province", province)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[bool]:
        """
        CommonName defines whether to add the organizationalUnit information into the issuer.
        """
        return pulumi.get(self, "common_name")

    @property
    @pulumi.getter
    def country(self) -> Optional[bool]:
        """
        Country defines whether to add the country information into the issuer.
        """
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="domainComponent")
    def domain_component(self) -> Optional[bool]:
        """
        DomainComponent defines whether to add the domainComponent information into the issuer.
        """
        return pulumi.get(self, "domain_component")

    @property
    @pulumi.getter
    def locality(self) -> Optional[bool]:
        """
        Locality defines whether to add the locality information into the issuer.
        """
        return pulumi.get(self, "locality")

    @property
    @pulumi.getter
    def organization(self) -> Optional[bool]:
        """
        Organization defines whether to add the organization information into the issuer.
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def province(self) -> Optional[bool]:
        """
        Province defines whether to add the province information into the issuer.
        """
        return pulumi.get(self, "province")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[bool]:
        """
        SerialNumber defines whether to add the serialNumber information into the issuer.
        """
        return pulumi.get(self, "serial_number")


@pulumi.output_type
class MiddlewareSpecPassTLSClientCertInfoSubject(dict):
    """
    Subject defines the client certificate subject details to add to the X-Forwarded-Tls-Client-Cert-Info header.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonName":
            suggest = "common_name"
        elif key == "domainComponent":
            suggest = "domain_component"
        elif key == "organizationalUnit":
            suggest = "organizational_unit"
        elif key == "serialNumber":
            suggest = "serial_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MiddlewareSpecPassTLSClientCertInfoSubject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MiddlewareSpecPassTLSClientCertInfoSubject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MiddlewareSpecPassTLSClientCertInfoSubject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_name: Optional[bool] = None,
                 country: Optional[bool] = None,
                 domain_component: Optional[bool] = None,
                 locality: Optional[bool] = None,
                 organization: Optional[bool] = None,
                 organizational_unit: Optional[bool] = None,
                 province: Optional[bool] = None,
                 serial_number: Optional[bool] = None):
        """
        Subject defines the client certificate subject details to add to the X-Forwarded-Tls-Client-Cert-Info header.
        :param bool common_name: CommonName defines whether to add the organizationalUnit information into the subject.
        :param bool country: Country defines whether to add the country information into the subject.
        :param bool domain_component: DomainComponent defines whether to add the domainComponent information into the subject.
        :param bool locality: Locality defines whether to add the locality information into the subject.
        :param bool organization: Organization defines whether to add the organization information into the subject.
        :param bool organizational_unit: OrganizationalUnit defines whether to add the organizationalUnit information into the subject.
        :param bool province: Province defines whether to add the province information into the subject.
        :param bool serial_number: SerialNumber defines whether to add the serialNumber information into the subject.
        """
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if domain_component is not None:
            pulumi.set(__self__, "domain_component", domain_component)
        if locality is not None:
            pulumi.set(__self__, "locality", locality)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if organizational_unit is not None:
            pulumi.set(__self__, "organizational_unit", organizational_unit)
        if province is not None:
            pulumi.set(__self__, "province", province)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[bool]:
        """
        CommonName defines whether to add the organizationalUnit information into the subject.
        """
        return pulumi.get(self, "common_name")

    @property
    @pulumi.getter
    def country(self) -> Optional[bool]:
        """
        Country defines whether to add the country information into the subject.
        """
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="domainComponent")
    def domain_component(self) -> Optional[bool]:
        """
        DomainComponent defines whether to add the domainComponent information into the subject.
        """
        return pulumi.get(self, "domain_component")

    @property
    @pulumi.getter
    def locality(self) -> Optional[bool]:
        """
        Locality defines whether to add the locality information into the subject.
        """
        return pulumi.get(self, "locality")

    @property
    @pulumi.getter
    def organization(self) -> Optional[bool]:
        """
        Organization defines whether to add the organization information into the subject.
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> Optional[bool]:
        """
        OrganizationalUnit defines whether to add the organizationalUnit information into the subject.
        """
        return pulumi.get(self, "organizational_unit")

    @property
    @pulumi.getter
    def province(self) -> Optional[bool]:
        """
        Province defines whether to add the province information into the subject.
        """
        return pulumi.get(self, "province")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[bool]:
        """
        SerialNumber defines whether to add the serialNumber information into the subject.
        """
        return pulumi.get(self, "serial_number")


@pulumi.output_type
class MiddlewareSpecRateLimit(dict):
    """
    RateLimit holds the rate limit configuration. This middleware ensures that services will receive a fair amount of requests, and allows one to define what fair is. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/ratelimit/
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceCriterion":
            suggest = "source_criterion"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MiddlewareSpecRateLimit. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MiddlewareSpecRateLimit.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MiddlewareSpecRateLimit.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 average: Optional[int] = None,
                 burst: Optional[int] = None,
                 period: Optional[Any] = None,
                 source_criterion: Optional['outputs.MiddlewareSpecRateLimitSourceCriterion'] = None):
        """
        RateLimit holds the rate limit configuration. This middleware ensures that services will receive a fair amount of requests, and allows one to define what fair is. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/ratelimit/
        :param int average: Average is the maximum rate, by default in requests/s, allowed for the given source. It defaults to 0, which means no rate limiting. The rate is actually defined by dividing Average by Period. So for a rate below 1req/s, one needs to define a Period larger than a second.
        :param int burst: Burst is the maximum number of requests allowed to arrive in the same arbitrarily small period of time. It defaults to 1.
        :param Union[int, str] period: Period, in combination with Average, defines the actual maximum rate, such as: r = Average / Period. It defaults to a second.
        :param 'MiddlewareSpecRateLimitSourceCriterionArgs' source_criterion: SourceCriterion defines what criterion is used to group requests as originating from a common source. If several strategies are defined at the same time, an error will be raised. If none are set, the default is to use the request's remote address field (as an ipStrategy).
        """
        if average is not None:
            pulumi.set(__self__, "average", average)
        if burst is not None:
            pulumi.set(__self__, "burst", burst)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if source_criterion is not None:
            pulumi.set(__self__, "source_criterion", source_criterion)

    @property
    @pulumi.getter
    def average(self) -> Optional[int]:
        """
        Average is the maximum rate, by default in requests/s, allowed for the given source. It defaults to 0, which means no rate limiting. The rate is actually defined by dividing Average by Period. So for a rate below 1req/s, one needs to define a Period larger than a second.
        """
        return pulumi.get(self, "average")

    @property
    @pulumi.getter
    def burst(self) -> Optional[int]:
        """
        Burst is the maximum number of requests allowed to arrive in the same arbitrarily small period of time. It defaults to 1.
        """
        return pulumi.get(self, "burst")

    @property
    @pulumi.getter
    def period(self) -> Optional[Any]:
        """
        Period, in combination with Average, defines the actual maximum rate, such as: r = Average / Period. It defaults to a second.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="sourceCriterion")
    def source_criterion(self) -> Optional['outputs.MiddlewareSpecRateLimitSourceCriterion']:
        """
        SourceCriterion defines what criterion is used to group requests as originating from a common source. If several strategies are defined at the same time, an error will be raised. If none are set, the default is to use the request's remote address field (as an ipStrategy).
        """
        return pulumi.get(self, "source_criterion")


@pulumi.output_type
class MiddlewareSpecRateLimitSourceCriterion(dict):
    """
    SourceCriterion defines what criterion is used to group requests as originating from a common source. If several strategies are defined at the same time, an error will be raised. If none are set, the default is to use the request's remote address field (as an ipStrategy).
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipStrategy":
            suggest = "ip_strategy"
        elif key == "requestHeaderName":
            suggest = "request_header_name"
        elif key == "requestHost":
            suggest = "request_host"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MiddlewareSpecRateLimitSourceCriterion. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MiddlewareSpecRateLimitSourceCriterion.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MiddlewareSpecRateLimitSourceCriterion.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_strategy: Optional['outputs.MiddlewareSpecRateLimitSourceCriterionIpStrategy'] = None,
                 request_header_name: Optional[str] = None,
                 request_host: Optional[bool] = None):
        """
        SourceCriterion defines what criterion is used to group requests as originating from a common source. If several strategies are defined at the same time, an error will be raised. If none are set, the default is to use the request's remote address field (as an ipStrategy).
        :param 'MiddlewareSpecRateLimitSourceCriterionIpStrategyArgs' ip_strategy: IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/ipwhitelist/#ipstrategy
        :param str request_header_name: RequestHeaderName defines the name of the header used to group incoming requests.
        :param bool request_host: RequestHost defines whether to consider the request Host as the source.
        """
        if ip_strategy is not None:
            pulumi.set(__self__, "ip_strategy", ip_strategy)
        if request_header_name is not None:
            pulumi.set(__self__, "request_header_name", request_header_name)
        if request_host is not None:
            pulumi.set(__self__, "request_host", request_host)

    @property
    @pulumi.getter(name="ipStrategy")
    def ip_strategy(self) -> Optional['outputs.MiddlewareSpecRateLimitSourceCriterionIpStrategy']:
        """
        IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/ipwhitelist/#ipstrategy
        """
        return pulumi.get(self, "ip_strategy")

    @property
    @pulumi.getter(name="requestHeaderName")
    def request_header_name(self) -> Optional[str]:
        """
        RequestHeaderName defines the name of the header used to group incoming requests.
        """
        return pulumi.get(self, "request_header_name")

    @property
    @pulumi.getter(name="requestHost")
    def request_host(self) -> Optional[bool]:
        """
        RequestHost defines whether to consider the request Host as the source.
        """
        return pulumi.get(self, "request_host")


@pulumi.output_type
class MiddlewareSpecRateLimitSourceCriterionIpStrategy(dict):
    """
    IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/ipwhitelist/#ipstrategy
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "excludedIPs":
            suggest = "excluded_ips"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MiddlewareSpecRateLimitSourceCriterionIpStrategy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MiddlewareSpecRateLimitSourceCriterionIpStrategy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MiddlewareSpecRateLimitSourceCriterionIpStrategy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 depth: Optional[int] = None,
                 excluded_ips: Optional[Sequence[str]] = None):
        """
        IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/ipwhitelist/#ipstrategy
        :param int depth: Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).
        :param Sequence[str] excluded_ips: ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.
        """
        if depth is not None:
            pulumi.set(__self__, "depth", depth)
        if excluded_ips is not None:
            pulumi.set(__self__, "excluded_ips", excluded_ips)

    @property
    @pulumi.getter
    def depth(self) -> Optional[int]:
        """
        Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).
        """
        return pulumi.get(self, "depth")

    @property
    @pulumi.getter(name="excludedIPs")
    def excluded_ips(self) -> Optional[Sequence[str]]:
        """
        ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.
        """
        return pulumi.get(self, "excluded_ips")


@pulumi.output_type
class MiddlewareSpecRedirectRegex(dict):
    """
    RedirectRegex holds the redirect regex middleware configuration. This middleware redirects a request using regex matching and replacement. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/redirectregex/#regex
    """
    def __init__(__self__, *,
                 permanent: Optional[bool] = None,
                 regex: Optional[str] = None,
                 replacement: Optional[str] = None):
        """
        RedirectRegex holds the redirect regex middleware configuration. This middleware redirects a request using regex matching and replacement. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/redirectregex/#regex
        :param bool permanent: Permanent defines whether the redirection is permanent (301).
        :param str regex: Regex defines the regex used to match and capture elements from the request URL.
        :param str replacement: Replacement defines how to modify the URL to have the new target URL.
        """
        if permanent is not None:
            pulumi.set(__self__, "permanent", permanent)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if replacement is not None:
            pulumi.set(__self__, "replacement", replacement)

    @property
    @pulumi.getter
    def permanent(self) -> Optional[bool]:
        """
        Permanent defines whether the redirection is permanent (301).
        """
        return pulumi.get(self, "permanent")

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        """
        Regex defines the regex used to match and capture elements from the request URL.
        """
        return pulumi.get(self, "regex")

    @property
    @pulumi.getter
    def replacement(self) -> Optional[str]:
        """
        Replacement defines how to modify the URL to have the new target URL.
        """
        return pulumi.get(self, "replacement")


@pulumi.output_type
class MiddlewareSpecRedirectScheme(dict):
    """
    RedirectScheme holds the redirect scheme middleware configuration. This middleware redirects requests from a scheme/port to another. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/redirectscheme/
    """
    def __init__(__self__, *,
                 permanent: Optional[bool] = None,
                 port: Optional[str] = None,
                 scheme: Optional[str] = None):
        """
        RedirectScheme holds the redirect scheme middleware configuration. This middleware redirects requests from a scheme/port to another. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/redirectscheme/
        :param bool permanent: Permanent defines whether the redirection is permanent (301).
        :param str port: Port defines the port of the new URL.
        :param str scheme: Scheme defines the scheme of the new URL.
        """
        if permanent is not None:
            pulumi.set(__self__, "permanent", permanent)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def permanent(self) -> Optional[bool]:
        """
        Permanent defines whether the redirection is permanent (301).
        """
        return pulumi.get(self, "permanent")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        """
        Port defines the port of the new URL.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        """
        Scheme defines the scheme of the new URL.
        """
        return pulumi.get(self, "scheme")


@pulumi.output_type
class MiddlewareSpecReplacePath(dict):
    """
    ReplacePath holds the replace path middleware configuration. This middleware replaces the path of the request URL and store the original path in an X-Replaced-Path header. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/replacepath/
    """
    def __init__(__self__, *,
                 path: Optional[str] = None):
        """
        ReplacePath holds the replace path middleware configuration. This middleware replaces the path of the request URL and store the original path in an X-Replaced-Path header. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/replacepath/
        :param str path: Path defines the path to use as replacement in the request URL.
        """
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path defines the path to use as replacement in the request URL.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class MiddlewareSpecReplacePathRegex(dict):
    """
    ReplacePathRegex holds the replace path regex middleware configuration. This middleware replaces the path of a URL using regex matching and replacement. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/replacepathregex/
    """
    def __init__(__self__, *,
                 regex: Optional[str] = None,
                 replacement: Optional[str] = None):
        """
        ReplacePathRegex holds the replace path regex middleware configuration. This middleware replaces the path of a URL using regex matching and replacement. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/replacepathregex/
        :param str regex: Regex defines the regular expression used to match and capture the path from the request URL.
        :param str replacement: Replacement defines the replacement path format, which can include captured variables.
        """
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if replacement is not None:
            pulumi.set(__self__, "replacement", replacement)

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        """
        Regex defines the regular expression used to match and capture the path from the request URL.
        """
        return pulumi.get(self, "regex")

    @property
    @pulumi.getter
    def replacement(self) -> Optional[str]:
        """
        Replacement defines the replacement path format, which can include captured variables.
        """
        return pulumi.get(self, "replacement")


@pulumi.output_type
class MiddlewareSpecRetry(dict):
    """
    Retry holds the retry middleware configuration. This middleware reissues requests a given number of times to a backend server if that server does not reply. As soon as the server answers, the middleware stops retrying, regardless of the response status. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/retry/
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initialInterval":
            suggest = "initial_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MiddlewareSpecRetry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MiddlewareSpecRetry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MiddlewareSpecRetry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attempts: Optional[int] = None,
                 initial_interval: Optional[Any] = None):
        """
        Retry holds the retry middleware configuration. This middleware reissues requests a given number of times to a backend server if that server does not reply. As soon as the server answers, the middleware stops retrying, regardless of the response status. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/retry/
        :param int attempts: Attempts defines how many times the request should be retried.
        :param Union[int, str] initial_interval: InitialInterval defines the first wait time in the exponential backoff series. The maximum interval is calculated as twice the initialInterval. If unspecified, requests will be retried immediately. The value of initialInterval should be provided in seconds or as a valid duration format, see https://pkg.go.dev/time#ParseDuration.
        """
        if attempts is not None:
            pulumi.set(__self__, "attempts", attempts)
        if initial_interval is not None:
            pulumi.set(__self__, "initial_interval", initial_interval)

    @property
    @pulumi.getter
    def attempts(self) -> Optional[int]:
        """
        Attempts defines how many times the request should be retried.
        """
        return pulumi.get(self, "attempts")

    @property
    @pulumi.getter(name="initialInterval")
    def initial_interval(self) -> Optional[Any]:
        """
        InitialInterval defines the first wait time in the exponential backoff series. The maximum interval is calculated as twice the initialInterval. If unspecified, requests will be retried immediately. The value of initialInterval should be provided in seconds or as a valid duration format, see https://pkg.go.dev/time#ParseDuration.
        """
        return pulumi.get(self, "initial_interval")


@pulumi.output_type
class MiddlewareSpecStripPrefix(dict):
    """
    StripPrefix holds the strip prefix middleware configuration. This middleware removes the specified prefixes from the URL path. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/stripprefix/
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceSlash":
            suggest = "force_slash"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MiddlewareSpecStripPrefix. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MiddlewareSpecStripPrefix.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MiddlewareSpecStripPrefix.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_slash: Optional[bool] = None,
                 prefixes: Optional[Sequence[str]] = None):
        """
        StripPrefix holds the strip prefix middleware configuration. This middleware removes the specified prefixes from the URL path. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/stripprefix/
        :param bool force_slash: ForceSlash ensures that the resulting stripped path is not the empty string, by replacing it with / when necessary. Default: true.
        :param Sequence[str] prefixes: Prefixes defines the prefixes to strip from the request URL.
        """
        if force_slash is not None:
            pulumi.set(__self__, "force_slash", force_slash)
        if prefixes is not None:
            pulumi.set(__self__, "prefixes", prefixes)

    @property
    @pulumi.getter(name="forceSlash")
    def force_slash(self) -> Optional[bool]:
        """
        ForceSlash ensures that the resulting stripped path is not the empty string, by replacing it with / when necessary. Default: true.
        """
        return pulumi.get(self, "force_slash")

    @property
    @pulumi.getter
    def prefixes(self) -> Optional[Sequence[str]]:
        """
        Prefixes defines the prefixes to strip from the request URL.
        """
        return pulumi.get(self, "prefixes")


@pulumi.output_type
class MiddlewareSpecStripPrefixRegex(dict):
    """
    StripPrefixRegex holds the strip prefix regex middleware configuration. This middleware removes the matching prefixes from the URL path. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/stripprefixregex/
    """
    def __init__(__self__, *,
                 regex: Optional[Sequence[str]] = None):
        """
        StripPrefixRegex holds the strip prefix regex middleware configuration. This middleware removes the matching prefixes from the URL path. More info: https://doc.traefik.io/traefik/v2.8/middlewares/http/stripprefixregex/
        :param Sequence[str] regex: Regex defines the regular expression to match the path prefix from the request URL.
        """
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def regex(self) -> Optional[Sequence[str]]:
        """
        Regex defines the regular expression to match the path prefix from the request URL.
        """
        return pulumi.get(self, "regex")


