#!/usr/bin/env python

import sys
import json
import argparse
import subprocess
from rich import print
from pathlib import Path
from textwrap import dedent
from textwrap import indent
from typing import Optional
from tempfile import TemporaryDirectory

def root() -> Path:
    return Path(
        subprocess.check_output(
            ["git", "rev-parse", "--show-toplevel"], text=True
        ).strip()
    )

# Copied from tools/encrypt
def encrypt(thing: str) -> str:
    p = subprocess.run(
        ["age", "-R", root() / "tools" / "age-public-key.pub", "--encrypt", "--armor"],
        input=thing,
        check=True,
        stdout=subprocess.PIPE,
        text=True,
    )
    return p.stdout


def format_nix_str(s: str, multiline_indent: Optional[int] = None) -> str:
    if multiline_indent is None:
        return json.dumps(s)
    else:
        assert "''" not in s
        return (
            "''\n"
            + indent(s, prefix=" " * multiline_indent)
            + (" " * (multiline_indent - 2))
            + "''"
        )

def parse_pwfile(pwfile: Path) -> dict[str, str]:
    hashed_pw_by_username: dict[str, str] = {}
    pw_contents = pwfile.read_text()
    for line in pw_contents.splitlines():
        username, hashed_password = line.split(":", maxsplit=1)
        hashed_pw_by_username[username] = hashed_password

    return hashed_pw_by_username

def main():
    parser = argparse.ArgumentParser(
        description=dedent(
            """\
            Generate an encrypted, hashed mosquitto password to easily copy paste into iac/pulumi/app/mosquitto.py.

            Example:
                $ echo hunter2 | ./encrypt-mosquitto-password
            """
        )
    )
    parser.add_argument(
        "--strip-trailing-newline",
        action=argparse.BooleanOptionalAction,
        default=True,
        help="Whether or not to automatically remove trailing newlines if they exist.",
    )
    args = parser.parse_args()

    password = sys.stdin.read()
    if password[-1] == "\n" and args.strip_trailing_newline:
        print(
            dedent(
                """\
                    [red][bold]Courtesy alert[/bold]: I've detected that whatever
                    you're encrypting ends in a newline character and am removing it
                    for you. Use --no-strip-trailing-newline to disable this
                    behavior.[/red]
                """
            ),
            file=sys.stderr,
        )
        password = password[:-1]

    dummy_username = "dummy_username"

    with TemporaryDirectory() as tmpdir:
        tmpdir = Path(tmpdir)
        pwfile = tmpdir / "passwords"

        subprocess.check_output(
            [
                "mosquitto_passwd",
                "-b", # batch mode to allow passing passwords on the command line
                "-c", # create a new password file
                pwfile,
                dummy_username,
                password,
            ]
        )

        hashed_password_by_username = parse_pwfile(pwfile)

    hashed_password = hashed_password_by_username[dummy_username]
    encrypted_hashed_password = encrypt(hashed_password)
    print(encrypted_hashed_password, end="")


if __name__ == "__main__":
    main()
