#!/usr/bin/env python

import os
import re
import sys
import subprocess
from rich import print
from hashlib import sha256
from textwrap import dedent

AGE_ARMOR_RE = re.compile(
    r"^(?P<ws_prefix> *)-----BEGIN AGE ENCRYPTED FILE-----.*?-----END AGE ENCRYPTED FILE-----",
    re.DOTALL | re.MULTILINE,
)

DECRYPTED_SECRETS_DIR = ".sensitive-decrypted-secrets"
PRIVATE_KEY_PATH = os.path.join(DECRYPTED_SECRETS_DIR, "age-private-key.txt")


def decrypt(encrypted: str) -> str:
    p = subprocess.run(
        ["age", "-i", PRIVATE_KEY_PATH, "--decrypt"],
        input=encrypted,
        check=True,
        stdout=subprocess.PIPE,
        text=True,
    )
    return p.stdout


def extract_and_decrypt_secrets(src: str):
    with open(src, "r") as f:
        document = f.read()

    for m in AGE_ARMOR_RE.finditer(document):
        encrypted = dedent(m.group(0))
        hash_encrypted = sha256(encrypted.encode("utf8")).hexdigest()
        decrypted = decrypt(encrypted)
        secret_file = os.path.join(DECRYPTED_SECRETS_DIR, f"{hash_encrypted}.secret")
        with open(secret_file, "w") as f:
            f.write(decrypted)

        os.chmod(secret_file, 0o640)


def sanity_check_private_key():
    private_key_problem = None
    if not os.path.isfile(PRIVATE_KEY_PATH):
        private_key_problem = f"Could not find {PRIVATE_KEY_PATH}"
    elif os.path.getsize(PRIVATE_KEY_PATH) == 0:
        private_key_problem = f"{PRIVATE_KEY_PATH} is empty!"

    if private_key_problem is not None:
        os.makedirs(os.path.dirname(PRIVATE_KEY_PATH), exist_ok=True)
        print(
            dedent(
                f"""\
                [bold red]{private_key_problem}[/bold red]

                Have you successfully decrypted the age private key?

                    age --decrypt -i ~/.ssh/id_rsa tools/age-private-key.txt.age > {PRIVATE_KEY_PATH}
                """
            ),
            file=sys.stderr,
        )
        sys.exit(1)


def deage_file(aged_filename: str):
    assert aged_filename.endswith(".aged")
    deaged_filename = aged_filename.removesuffix(".aged") + ".secret"

    with open(aged_filename, "r") as f:
        aged_doc = f.read()

    def decrypt_match(m):
        prefix = m.group("ws_prefix")
        encrypted = dedent(m.group(0))
        return prefix + decrypt(encrypted)

    deaged_doc = AGE_ARMOR_RE.sub(decrypt_match, aged_doc)

    with open(deaged_filename, "w") as f:
        f.write(deaged_doc)


def main():
    sanity_check_private_key()

    for root, _, files in os.walk(DECRYPTED_SECRETS_DIR):
        for file in files:
            if file.endswith(".secret"):
                os.unlink(os.path.join(root, file))

    for root, _, files in os.walk("."):
        for file in files:
            if file.endswith(".nix") or file.endswith(".py"):
                extract_and_decrypt_secrets(os.path.join(root, file))
            elif file.endswith(".aged"):
                deage_file(os.path.join(root, file))


if __name__ == "__main__":
    main()
