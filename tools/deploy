#!/usr/bin/env bash

set -euo pipefail
shopt -s globstar

# Change to the root of the repo.
cd "$(git rev-parse --show-toplevel)"

help() {
    echo "Usage: $0 [target]

To deploy a NixOS host:

    $0 dallben

To deploy an OpenWrt router:

    $0 openwrt/strider

To deploy infra as code (Kubernetes, etc):

    $0 iac

Options:

    --dry-run: build, but do not apply the changes
    --show-trace: passed to any invocations of the 'nix' cli
    --use-substitutes: instruct remote to download from cache.nixos.org if possible
    --build-remote: build on remote machine rather than locally
" >/dev/stderr
}

TARGETS=()
DRY_RUN=0
BUILD_REMOTE=0
FORCE=0
EXTRA_NIX_ARGS=()
EXTRA_SWITCH_ARGS=()
for i in "$@"; do
    case $i in
        --dry-run)
            DRY_RUN=1
            ;;
        --force)
            FORCE=1
            ;;
        --show-trace)
            EXTRA_NIX_ARGS+=("--show-trace")
            ;;
        --use-substitutes)
            EXTRA_SWITCH_ARGS+=("--use-substitutes")
            ;;
        --build-remote)
            BUILD_REMOTE=1
            ;;
        --help | -h)
            help
            exit 0
            ;;
        --* | -*)
            echo "Unknown option $i" >/dev/stderr
            echo "" >/dev/stderr
            exit 1
            ;;
        *)
            TARGETS+=("$i")
            ;;
    esac
done

if [ "${#TARGETS[@]}" -eq 1 ]; then
    TARGET=${TARGETS[0]}
else
    echo "You must specify exactly one target" >/dev/stderr
    echo "" >/dev/stderr
    help
    exit 1
fi

function _nix() {
    nix "${EXTRA_NIX_ARGS[@]}" "$@"
}

function push_containers() {
    # Our cluster (currently) only has x86 machines in it.
    local k8s_system=x86_64-linux

    for container_path in containers/*; do
        # Convert something like `containers/snow-web` to `snow-web`.
        container=$(basename "$container_path")
        target=".#containers.${k8s_system}.${container}"
        result=$(_nix build "$target" --no-link --print-out-paths)

        # Note: we're intentionally using ' here instead of " because we want
        # the $ chars to be passed as-is to `nix eval`.
        # shellcheck disable=SC2016
        immutable_image=$(_nix eval "$target" --raw --apply 'img: "${img.imageName}:${img.imageTag}"')
        # shellcheck disable=SC2016
        latest_image=$(_nix eval "$target" --raw --apply 'img: "${img.imageName}:latest"')

        fq_immutable_name=docker://containers.snow.jflei.com/$immutable_image
        fq_latest_name=docker://containers.snow.jflei.com/$latest_image

        if [ $DRY_RUN == 1 ]; then
            echo "Dry run: skipping upload of $fq_immutable_name"
        else
            # Only build and upload the image if it doesn't already exist remotely.
            if ! skopeo inspect "$fq_immutable_name" &>/dev/null; then
                $result | gzip --fast | skopeo --insecure-policy copy docker-archive:/dev/stdin "$fq_immutable_name"
            fi

            # Finally, tag it as the latest version.
            skopeo --insecure-policy copy --preserve-digests --quiet "$fq_immutable_name" "$fq_latest_name"
        fi

        # TODO: restart affected deployments, or (better) use immutable image tags in manifests.
    done
}

function deploy_iac() {
    for f in iac/k8s/**/*{.yaml,.yaml.secret}; do
        if [ $DRY_RUN == 1 ]; then
            echo "Diffing $f"
            kubectl diff -f "$f"
        else
            echo "Applying $f"
            kubectl apply -f "$f"
        fi
    done

    if [ $DRY_RUN == 1 ]; then
        pulumi preview --cwd iac/pulumi --stack dev
    else
        pulumi up --cwd iac/pulumi --stack dev --yes
    fi
}

function deploy_nix() {
    local target="$1"
    shift

    local is_local=0
    if [ "$target" = "$(hostname)" ]; then
        is_local=1
    fi

    if [ $DRY_RUN == 1 ]; then
        echo "Building (but not deploying!) new system..."
        new_system=$(_nix build ".#nixosConfigurations.$target.config.system.build.toplevel" --print-out-paths --no-link)
        if [ $is_local == 1 ]; then
            current_system=/run/current-system
        else
            current_system=$(ssh "$target" realpath /run/current-system)
            _nix copy --from "ssh://$target" "$current_system"
        fi
        _nix store diff-closures "$current_system" "$new_system"
        exit 0
    fi

    if [ "$target" = "$(hostname)" ]; then
        nixos-rebuild switch --use-remote-sudo --flake ".#$target"
    else
        nixos-rebuild switch --use-remote-sudo --flake ".#$target" --target-host "$target" "${EXTRA_SWITCH_ARGS[@]}"
    fi
}

function deploy_nix_router() {
    local target="$1"
    shift

    extra_args=()
    if [ "$DRY_RUN" == 1 ]; then
        extra_args+=("--dry-run")
    fi
    if [ "$FORCE" == 1 ]; then
        extra_args+=("--force")
    fi

    hostname=${target#openwrt/}
    tools/deploy-openwrt.sh "$hostname" "${extra_args[@]}"
}

python -m tools.deage

if [ "$TARGET" = "containers" ]; then
    push_containers
elif [ "$TARGET" = "iac" ]; then
    push_containers
    deploy_iac
elif [[ $TARGET == "openwrt/"* ]]; then
    deploy_nix_router "$TARGET"
else
    if [ $BUILD_REMOTE == 1 ]; then
        EXTRA_SWITCH_ARGS+=("--build-host" "$TARGET")
    fi
    deploy_nix "$TARGET"
fi
