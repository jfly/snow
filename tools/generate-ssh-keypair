#!/usr/bin/env python

"""
I introduced this script in a99ef3d3a2ecdae81ef74e1849ada4a0bc833724
thinking it would be a good way to preserve the ssh key of machines rather than
having them generated on boot.

This worked, but the deage mechanism it relies upon is fundamentally impure (it
relies upon reading uncommitted files). I've started using agenix as a pure
alternative, but relies upon these very host identities to function, it can't
bootstrap those.

For now, to unblock pure-evaluation, I've removed all usages of this, but I
would still like to figure out a robust mechanism for managing host identities (and
bootstrapping new hosts). Perhaps this can be done as part of building a live
usb when bootstrapping a new host?
"""

import os
import json
import argparse
import subprocess
from textwrap import dedent
from textwrap import indent
from typing import Optional
from tempfile import TemporaryDirectory


# Copied from tools/encrypt
def encrypt(thing: str) -> str:
    p = subprocess.run(
        ["age", "-R", "tools/age-public-key.pub", "--encrypt", "--armor"],
        input=thing,
        check=True,
        stdout=subprocess.PIPE,
        text=True,
    )
    return p.stdout


def format_nix_str(s: str, multiline_indent: Optional[int] = None) -> str:
    if multiline_indent is None:
        return json.dumps(s)
    else:
        assert "''" not in s
        return (
            "''\n"
            + indent(s, prefix=" " * multiline_indent)
            + (" " * (multiline_indent - 2))
            + "''"
        )


def main():
    parser = argparse.ArgumentParser(
        description=dedent(
            """\
                Generate a ssh keypair to easily copy paste into a NixOS system configuration.
            """
        )
    )
    parser.add_argument("hostname", help="Hostname to identify the keypair")
    args = parser.parse_args()

    private_key = private_key = None
    with TemporaryDirectory() as tmpdir:
        private_keyfile = os.path.join(tmpdir, "key")
        pub_keyfile = private_keyfile + ".pub"

        subprocess.check_output(
            [
                "ssh-keygen",
                "-t",
                "ed25519",
                "-f",
                private_keyfile,
                "-P",
                "",
                "-C",
                args.hostname,
            ]
        )

        with open(private_keyfile, "r") as f:
            private_key = f.read()

        with open(pub_keyfile, "r") as f:
            public_key = f.read()

    encrypted_private_key = encrypt(private_key)
    nix_code = dedent(
        f"""\
          # Generated with: tools/generate-ssh-keypair {args.hostname}
          system.activationScripts = {{
            copySshKey =
              let
                keypair = {{
                  public = pkgs.writeText "id_ed25519.pub" {format_nix_str(public_key)};
                  private = pkgs.deage.storeFile {{
                    name = "id_ed25519";
                    encrypted = {format_nix_str(encrypted_private_key, multiline_indent=16)};
                  }};
                }};
              in
              ''
                cp ${{keypair.private}} /root/.ssh/id_ed25519
                cp ${{keypair.public}} /root/.ssh/id_ed25519.pub
                chmod 0400 /root/.ssh/id_ed25519
              '';
          }};"""
    )
    print(nix_code)


if __name__ == "__main__":
    main()
