#!/usr/bin/env bash

set -euo pipefail

cd "$(dirname "$0")"

# shellcheck disable=SC2034  # see commented out code below about connecting to a server that uses mfa
prompt="$1"
second_factor=""

function get_2fa() {
    mfa_id=$1
    if two_factors=$(2fa-cli 2>&1); then
        second_factor=$(echo "$two_factors" | grep "$mfa_id" | cut -f 1)
        if [ "$second_factor" ]; then
            echo "$second_factor"
        else
            echo "Successfully connected to phone, but could not find '$mfa_id' 2fa." >/dev/stderr
        fi
    else
        echo "Could not connect to phone for 2fa. You're on your own." >/dev/stderr
    fi
}

# Example of how to connect to a server that uses
# [Google Authenticator PAM module](https://github.com/google/google-authenticator-libpam)
# if [ "$prompt" = "(jeremy@SOME_INTERESTING_HOST_HERE) Verification code: " ]; then
#     second_factor=$(get_2fa "MFA_SLUG_HERE")
# fi

if [ -z "$second_factor" ]; then
    # Note: we write and read to/from /dev/tty instead of stdin and stdout
    # because this is sometimes used in the content of commands that hijack
    # stdin/stdout/stderr (for example, `git fetch` hijacks stdin and stdout,
    # and mosh hijacks all three).
    echo -n "$@" >/dev/tty
    read -rs second_factor </dev/tty
    # Immediately add a newline to give the user a sense of progress when they hit enter.
    echo "" >/dev/tty
fi

echo -n "$second_factor"
