#!/usr/bin/env bash

# Given a 2fa name, try to fetch it via 2fa-cli. If it can't be found, fall back
# to prompting the user.

set -euo pipefail

item=$1

result=""
# Try to get the 2fa from an attached cell phone.
if two_factors=$(2fa-cli 2>&1); then
    if result=$(echo "$two_factors" | grep "$item" | cut -f 1); then
        : # we got a mfa, nice!
    fi
fi

# If we didn't get a result already, just prompt the user.
if [ -z "$result" ]; then
    # This trick for finding a tty comes from: https://unix.stackexchange.com/a/270372
    # We're going through such weird hoops because aws-vault invokes us with
    # stdin/out/err buffered so they can't be used to do a readline sort of
    # operation.
    tty="/dev/$(ps hotty $$)"
    # Note we're careful to only print to $tty. That's because this script
    # might be called via a clever ssh ProxyCommand, and printing to stdout would
    # actually inject bytes into the SSH TCP connection!
    echo "" >"$tty"
    echo -n "Enter MFA code for $item: " >"$tty"
    # We can't read from stdin here because it would mess up the ssh protocol (see
    # comment above about $tty).
    read -rs result <"$tty"
    # Give an immediate sense of progress when the user presses enter.
    echo "" >"$tty"
fi

echo "$result"

if [ -z "$result" ]; then
    echo "You must enter a MFA" >/dev/stderr
    exit 1
fi
