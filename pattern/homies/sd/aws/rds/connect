#!/usr/bin/env nix-shell
#!nix-shell -i python3 -p "python3.withPackages (ps: with ps; [boto3])" -p mysql

# Connect to a AWS RDS instance with the given secret.
# Usage: $0 -J bastion aws-secret-name

import hashlib
import time
import os
import argparse
import sys
import contextlib
import dataclasses
import socket
from pathlib import Path
import json
import subprocess
import tempfile
import textwrap
from typing import Callable

import boto3


def doit(secret_id: str, jump_host: str|None, override_host: str|None, schema: str|None, quick: bool):
    client = boto3.client('secretsmanager')
    response = client.get_secret_value(SecretId=secret_id)
    secret_str = response['SecretString']
    secret = json.loads(secret_str)
    mysql_shell(secret, jump_host, override_host, schema=schema, quick=quick)


@dataclasses.dataclass
class Tunnel:
    local_socket_path: Path

    remote_host: str
    remote_port: int

    def as_ssh_tunnel_args(self) -> list[str]:
        dest = f"{self.remote_host}:{self.remote_port}"
        return [
            "-L",
            f"{self.local_socket_path}:{dest}",
        ]


    def description(self) -> str:
        return f"tunnel to {self.remote_host}:{self.remote_port} (accessible locally at {self.local_socket_path})"

@dataclasses.dataclass
class SocketConnection:
    socket_path: Path

    def to_mysql_conf(self) -> str:
        return textwrap.dedent(
            f"""\
            socket={self.socket_path}
            """
        )

@dataclasses.dataclass
class TcpConnection:
    host: str
    port: int

    def to_mysql_conf(self) -> str:
        return textwrap.dedent(
            f"""\
            host={self.host}
            port={self.port}
            """
        )

def is_socket_bound(socket_path: Path, cleanup_if_not_bound: bool=False) -> bool:
    """
    Try to check (this question is inherently imperfect) if the given path is a bound
    socket. If it's not, return False.

    If `cleanup_if_not_bound` is specified, then try really hard to cleanup the
    file if it's not a socket or not bound. This is useful for recovering from
    past processes that didn't clean up after themselves.
    """
    if not socket_path.exists():
        return False

    if not socket_path.is_socket():
        if cleanup_if_not_bound:
            socket_path.unlink()
        else:
            assert False, f"Unexpectedly found a non-socket file at {socket_path}"
        return False
    else:
        client_socket = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)

        try:
            client_socket.connect(str(socket_path))
            return True
        except OSError:
            if cleanup_if_not_bound:
                socket_path.unlink()
            return False
        finally:
            client_socket.close()


def wait_for(f: Callable[[], bool], desc: str, timeout_seconds: int = 60):
    start = time.time()
    print(f"Waiting for {desc}", end="", file=sys.stderr)
    while not f():
        print(".", end="", flush=True, file=sys.stderr)
        elapsed = time.time() - start
        if elapsed > timeout_seconds:
            print(f"timed out after {elapsed:.0f}s!")
            sys.exit(1)
        time.sleep(0.1)

    elapsed = time.time() - start
    print(f"done in {elapsed:0.2f}s!", file=sys.stderr)

def get_runtime_dir() -> Path:
    return Path(os.environ.get("XDG_RUNTIME_DIR", f"/run/user/{os.getuid()}"))

def to_fs_safe_str(unsafe: str) -> str:
    """
    Convert the given string into something guaranteed not to do anything too
    interesting on a filesystem.
    """
    def keep(c: str) -> bool:
        return c.isalnum() or c in {" ", ".", "_"}
    return "".join(c if keep(c) else "-" for c in unsafe )

def truncate_uniquely(s: str, max_length: int) -> str:
    shorthash = hashlib.sha512("asdf".encode()).hexdigest()[:8]
    if len(s) < max_length:
        return s
    else:
        suffix = shorthash + "-"
        return s[0:max_length - len(suffix)] + suffix

@contextlib.contextmanager
def ssh_tunnel(host: str, port: int, jump_host: str):
    runtime_dir = get_runtime_dir()
    # SSH seems to have a max file length on sockets. I know it's somewhere
    # between 62 and 82, I haven't dug further. 64 seems like a nice power of
    # 2.
    ssh_max_sock_filename_length = 64
    socket_path = (runtime_dir / "rds-connector" / truncate_uniquely(to_fs_safe_str(f"{jump_host}:{host}:{port}"), max_length=ssh_max_sock_filename_length)).with_suffix(".sock")
    tunnel = Tunnel(local_socket_path=socket_path, remote_host=host, remote_port=port)

    if is_socket_bound(socket_path, cleanup_if_not_bound=True):
        print(f"Found an existing socket at: {socket_path}. I'm going to use it instead of setting up a new tunnel.", file=sys.stderr)
        yield tunnel
        return

    print(f"Setting up {tunnel.description()}", file=sys.stderr)

    socket_path.parent.mkdir(parents=True, exist_ok=True)

    p = subprocess.Popen(
        ["ssh", "-N", "-M", "-o", "ExitOnForwardFailure=yes",
         *tunnel.as_ssh_tunnel_args(), jump_host,],
    )

    try:
        wait_for(lambda: is_socket_bound(tunnel.local_socket_path), f"socket {tunnel.local_socket_path} to be bound", timeout_seconds=5)
        yield tunnel
    finally:
        print(f"cleaning up ssh tunnel (pid: {p.pid})", file=sys.stderr)
        p.terminate()
        p.wait()
        # Make a best effort to clean up after ssh. It's ok if we don't get
        # around to this, see the explanation of the `cleanup_if_not_bound`
        # parameter to `is_socket_bound` to understand how we clean this up on
        # startup.
        tunnel.local_socket_path.unlink()


def mysql_shell(secret: dict, jump_host: str|None, override_host: str|None, schema: str|None, quick: bool):
    username = secret['username']
    password = secret['password']
    engine = secret['engine']
    host = override_host or secret['host']
    port = int(secret['port'])

    connectors = {
        "mysql": mysql_connector,
    }
    connector = connectors[engine]

    if jump_host:
        with ssh_tunnel(host=host, port=port, jump_host=jump_host) as tunnel:
            connection = SocketConnection(socket_path=tunnel.local_socket_path)
            connector(connection=connection, user=username, password=password, schema=schema, quick=quick)
    else:
        connection = TcpConnection(host=host, port=port)
        connector(connection, user=username, password=password, schema=schema, quick=quick)



def mysql_connector(connection: SocketConnection|TcpConnection, user: str, password: str, schema: str|None, quick: bool):
    with tempfile.NamedTemporaryFile("w") as fp:
        with fp.file as f:
            f.write(
                textwrap.dedent(
                    f"""\
                        [client]
                        {connection.to_mysql_conf()}

                        user={user}
                        password={password}
                        """
                )
            )

        args=["mysql", f"--defaults-file={f.name}"]
        if schema is not None:
            args.append(schema)
        if quick:
            args.append("--disable-auto-rehash")

        p = subprocess.Popen(args)
        p.wait()


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "secret", help="id of aws secret containing creds to connect to db"
    )
    parser.add_argument(
        "--override-host", help="override the url of the database to connect to"
    )
    parser.add_argument(
        "--jump-host", "-J", help="ssh jump host to use to connect to the db"
    )
    parser.add_argument(
        "--schema", "-s", help='schema to connect to (confusingly also called a "database")'
    )
    parser.add_argument(
        "--quick", help='pass --disable-auto-rehash (-A) to mysql to speed up initial connection', action='store_true'
    )


    args = parser.parse_args()
    doit(secret_id=args.secret, jump_host=args.jump_host, override_host=args.override_host, schema=args.schema, quick=args.quick)


if __name__ == "__main__":
    main()

# vi: ft=python
