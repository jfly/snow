# This file is carefully named to come alphabetically after use_asdf.sh.
# This provides an alternative implementation of `use_asdf` that's built on top
# of nix rather than asdf-vm + asdf-direnv.
use_asdf() {
    watch_file .tool-versions
    # We can't use $(direnv_layout_dir) here because nix is smart enough to
    # realize that's (usually) inside of a git repo and it's gitignored, so
    # none it ends up in the nix store.
    asdf_nix_dir="${XDG_DATA_HOME:-$HOME/.local/share}/asdf-nix/$(md5sum ./.tool-versions | cut -f 1 -d " ")"
    if [ ! -d "$asdf_nix_dir" ]; then
        mkdir -p "$asdf_nix_dir"

        local dirname
        dirname=$(realpath $(dirname "${BASH_SOURCE[0]}"))
        cat <<EOF >"$asdf_nix_dir/flake.nix"
{
  description = "asdf-nix dev environment autogenerated by use_asdf";

  inputs = {
    flake-utils.url = "github:numtide/flake-utils";
    # asdf-nix-flake.url = "github:jfly/snow?dir=dotfiles/homies/config/direnv/lib/asdf-nix";
    asdf-nix-flake.url = "path:$dirname/asdf-nix";
  };

  outputs = { self, nixpkgs, flake-utils, asdf-nix-flake }:
    flake-utils.lib.eachDefaultSystem
      (system:
        let
          pkgs = nixpkgs.legacyPackages.\${system};
          asdf-nix = asdf-nix-flake.lib.\${system};
        in
        {
          devShells.default = pkgs.mkShell {
            buildInputs = (asdf-nix.pkgs {
                tool-versions = ''
$(cat ./.tool-versions)
'';
            });
          };
        }
      );
}
EOF
    fi
    use_flake "$asdf_nix_dir"
}
