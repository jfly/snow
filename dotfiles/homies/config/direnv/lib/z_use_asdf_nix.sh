# shellcheck shell=bash

# This file is carefully named to come alphabetically after use_asdf.sh.
# This provides an alternative implementation of `use_asdf` that's built on top
# of nix rather than asdf-vm + asdf-direnv.
use_asdf() {
    watch_file .tool-versions
    # We can't use $(direnv_layout_dir) here because nix is smart enough to
    # realize that's (usually) inside of a git repo and it's gitignored, so
    # none it ends up in the nix store.
    asdf_nix_dir="${XDG_DATA_HOME:-$HOME/.local/share}/asdf-nix/$(md5sum ./.tool-versions | cut -f 1 -d " ")"
    if [ ! -d "$asdf_nix_dir" ]; then
        mkdir -p "$asdf_nix_dir"

        local dirname
        dirname=$(realpath "$(dirname "${BASH_SOURCE[0]}")")
        cat <<EOF >"$asdf_nix_dir/flake.nix"
{
  description = "asdf-nix dev environment autogenerated by use_asdf";

  inputs = {
    flake-utils.url = "github:numtide/flake-utils";
    # asdf-nix-flake.url = "github:jfly/snow?dir=dotfiles/homies/config/direnv/lib/asdf-nix";
    asdf-nix-flake.url = "path:$dirname/asdf-nix";
  };

  outputs = { self, nixpkgs, flake-utils, asdf-nix-flake }:
    flake-utils.lib.eachDefaultSystem
      (system:
        let
          pkgs = nixpkgs.legacyPackages.\${system};
          asdf-nix = asdf-nix-flake.lib.\${system};
        in
        {
          devShells.default = pkgs.mkShell {
            buildInputs = (asdf-nix.pkgs {
                tool-versions = ''
$(cat ./.tool-versions)
'';
            });

            # Python wheels expect to be able to find shared libs in /usr/lib,
            # but NixOS is special and those files don't exist. See
            # https://www.breakds.org/post/build-python-package/#the-package-is-built-successfully-but-it-panics-about-not-finding-libstdcso6-when-being-imported
            # for details and a neat solution using autoPatchelfHook. However,
            # if we're using regular old venvs and pip, we don't have an
            # opportunity to patch wheels. Maybe there's something clever we
            # could do by providing a wrapper on top of pip? For now it's
            # working well enough to just set LD_LIBRARY_PATH.
            LD_LIBRARY_PATH = pkgs.stdenv.cc.cc.lib + /lib;
          };
        }
      );
}
EOF
    fi
    echo "Loading flake from $asdf_nix_dir"
    use_flake "$asdf_nix_dir"
}
